
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Questao
 * 
 */
export type Questao = $Result.DefaultSelection<Prisma.$QuestaoPayload>
/**
 * Model Simulado
 * 
 */
export type Simulado = $Result.DefaultSelection<Prisma.$SimuladoPayload>
/**
 * Model SimuladoQuestao
 * 
 */
export type SimuladoQuestao = $Result.DefaultSelection<Prisma.$SimuladoQuestaoPayload>
/**
 * Model Redacao
 * 
 */
export type Redacao = $Result.DefaultSelection<Prisma.$RedacaoPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questao`: Exposes CRUD operations for the **Questao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questaos
    * const questaos = await prisma.questao.findMany()
    * ```
    */
  get questao(): Prisma.QuestaoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.simulado`: Exposes CRUD operations for the **Simulado** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Simulados
    * const simulados = await prisma.simulado.findMany()
    * ```
    */
  get simulado(): Prisma.SimuladoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.simuladoQuestao`: Exposes CRUD operations for the **SimuladoQuestao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SimuladoQuestaos
    * const simuladoQuestaos = await prisma.simuladoQuestao.findMany()
    * ```
    */
  get simuladoQuestao(): Prisma.SimuladoQuestaoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.redacao`: Exposes CRUD operations for the **Redacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Redacaos
    * const redacaos = await prisma.redacao.findMany()
    * ```
    */
  get redacao(): Prisma.RedacaoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.5.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Questao: 'Questao',
    Simulado: 'Simulado',
    SimuladoQuestao: 'SimuladoQuestao',
    Redacao: 'Redacao'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "usuario" | "questao" | "simulado" | "simuladoQuestao" | "redacao"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsuarioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Questao: {
        payload: Prisma.$QuestaoPayload<ExtArgs>
        fields: Prisma.QuestaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload>
          }
          findFirst: {
            args: Prisma.QuestaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload>
          }
          findMany: {
            args: Prisma.QuestaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload>[]
          }
          create: {
            args: Prisma.QuestaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload>
          }
          createMany: {
            args: Prisma.QuestaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload>[]
          }
          delete: {
            args: Prisma.QuestaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload>
          }
          update: {
            args: Prisma.QuestaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload>
          }
          deleteMany: {
            args: Prisma.QuestaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestaoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload>[]
          }
          upsert: {
            args: Prisma.QuestaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload>
          }
          aggregate: {
            args: Prisma.QuestaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestao>
          }
          groupBy: {
            args: Prisma.QuestaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestaoCountArgs<ExtArgs>
            result: $Utils.Optional<QuestaoCountAggregateOutputType> | number
          }
        }
      }
      Simulado: {
        payload: Prisma.$SimuladoPayload<ExtArgs>
        fields: Prisma.SimuladoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SimuladoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SimuladoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoPayload>
          }
          findFirst: {
            args: Prisma.SimuladoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SimuladoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoPayload>
          }
          findMany: {
            args: Prisma.SimuladoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoPayload>[]
          }
          create: {
            args: Prisma.SimuladoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoPayload>
          }
          createMany: {
            args: Prisma.SimuladoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SimuladoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoPayload>[]
          }
          delete: {
            args: Prisma.SimuladoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoPayload>
          }
          update: {
            args: Prisma.SimuladoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoPayload>
          }
          deleteMany: {
            args: Prisma.SimuladoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SimuladoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SimuladoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoPayload>[]
          }
          upsert: {
            args: Prisma.SimuladoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoPayload>
          }
          aggregate: {
            args: Prisma.SimuladoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSimulado>
          }
          groupBy: {
            args: Prisma.SimuladoGroupByArgs<ExtArgs>
            result: $Utils.Optional<SimuladoGroupByOutputType>[]
          }
          count: {
            args: Prisma.SimuladoCountArgs<ExtArgs>
            result: $Utils.Optional<SimuladoCountAggregateOutputType> | number
          }
        }
      }
      SimuladoQuestao: {
        payload: Prisma.$SimuladoQuestaoPayload<ExtArgs>
        fields: Prisma.SimuladoQuestaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SimuladoQuestaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoQuestaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SimuladoQuestaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoQuestaoPayload>
          }
          findFirst: {
            args: Prisma.SimuladoQuestaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoQuestaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SimuladoQuestaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoQuestaoPayload>
          }
          findMany: {
            args: Prisma.SimuladoQuestaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoQuestaoPayload>[]
          }
          create: {
            args: Prisma.SimuladoQuestaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoQuestaoPayload>
          }
          createMany: {
            args: Prisma.SimuladoQuestaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SimuladoQuestaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoQuestaoPayload>[]
          }
          delete: {
            args: Prisma.SimuladoQuestaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoQuestaoPayload>
          }
          update: {
            args: Prisma.SimuladoQuestaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoQuestaoPayload>
          }
          deleteMany: {
            args: Prisma.SimuladoQuestaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SimuladoQuestaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SimuladoQuestaoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoQuestaoPayload>[]
          }
          upsert: {
            args: Prisma.SimuladoQuestaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimuladoQuestaoPayload>
          }
          aggregate: {
            args: Prisma.SimuladoQuestaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSimuladoQuestao>
          }
          groupBy: {
            args: Prisma.SimuladoQuestaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<SimuladoQuestaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.SimuladoQuestaoCountArgs<ExtArgs>
            result: $Utils.Optional<SimuladoQuestaoCountAggregateOutputType> | number
          }
        }
      }
      Redacao: {
        payload: Prisma.$RedacaoPayload<ExtArgs>
        fields: Prisma.RedacaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RedacaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RedacaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedacaoPayload>
          }
          findFirst: {
            args: Prisma.RedacaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RedacaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedacaoPayload>
          }
          findMany: {
            args: Prisma.RedacaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedacaoPayload>[]
          }
          create: {
            args: Prisma.RedacaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedacaoPayload>
          }
          createMany: {
            args: Prisma.RedacaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RedacaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedacaoPayload>[]
          }
          delete: {
            args: Prisma.RedacaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedacaoPayload>
          }
          update: {
            args: Prisma.RedacaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedacaoPayload>
          }
          deleteMany: {
            args: Prisma.RedacaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RedacaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RedacaoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedacaoPayload>[]
          }
          upsert: {
            args: Prisma.RedacaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedacaoPayload>
          }
          aggregate: {
            args: Prisma.RedacaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRedacao>
          }
          groupBy: {
            args: Prisma.RedacaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<RedacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.RedacaoCountArgs<ExtArgs>
            result: $Utils.Optional<RedacaoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    usuario?: UsuarioOmit
    questao?: QuestaoOmit
    simulado?: SimuladoOmit
    simuladoQuestao?: SimuladoQuestaoOmit
    redacao?: RedacaoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    redacoes: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    redacoes?: boolean | UsuarioCountOutputTypeCountRedacoesArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountRedacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RedacaoWhereInput
  }


  /**
   * Count Type QuestaoCountOutputType
   */

  export type QuestaoCountOutputType = {
    simulados: number
  }

  export type QuestaoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    simulados?: boolean | QuestaoCountOutputTypeCountSimuladosArgs
  }

  // Custom InputTypes
  /**
   * QuestaoCountOutputType without action
   */
  export type QuestaoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestaoCountOutputType
     */
    select?: QuestaoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestaoCountOutputType without action
   */
  export type QuestaoCountOutputTypeCountSimuladosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SimuladoQuestaoWhereInput
  }


  /**
   * Count Type SimuladoCountOutputType
   */

  export type SimuladoCountOutputType = {
    questoes: number
  }

  export type SimuladoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questoes?: boolean | SimuladoCountOutputTypeCountQuestoesArgs
  }

  // Custom InputTypes
  /**
   * SimuladoCountOutputType without action
   */
  export type SimuladoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimuladoCountOutputType
     */
    select?: SimuladoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SimuladoCountOutputType without action
   */
  export type SimuladoCountOutputTypeCountQuestoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SimuladoQuestaoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: string | null
    email: string | null
    senha: string | null
    nome: string | null
    criadoEm: Date | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: string | null
    email: string | null
    senha: string | null
    nome: string | null
    criadoEm: Date | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    email: number
    senha: number
    nome: number
    criadoEm: number
    _all: number
  }


  export type UsuarioMinAggregateInputType = {
    id?: true
    email?: true
    senha?: true
    nome?: true
    criadoEm?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    email?: true
    senha?: true
    nome?: true
    criadoEm?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    email?: true
    senha?: true
    nome?: true
    criadoEm?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: string
    email: string
    senha: string
    nome: string
    criadoEm: Date
    _count: UsuarioCountAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    senha?: boolean
    nome?: boolean
    criadoEm?: boolean
    redacoes?: boolean | Usuario$redacoesArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    senha?: boolean
    nome?: boolean
    criadoEm?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    senha?: boolean
    nome?: boolean
    criadoEm?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    email?: boolean
    senha?: boolean
    nome?: boolean
    criadoEm?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "senha" | "nome" | "criadoEm", ExtArgs["result"]["usuario"]>
  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    redacoes?: boolean | Usuario$redacoesArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UsuarioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      redacoes: Prisma.$RedacaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      senha: string
      nome: string
      criadoEm: Date
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {UsuarioUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsuarioUpdateManyAndReturnArgs>(args: SelectSubset<T, UsuarioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    redacoes<T extends Usuario$redacoesArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$redacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RedacaoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'String'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly senha: FieldRef<"Usuario", 'String'>
    readonly nome: FieldRef<"Usuario", 'String'>
    readonly criadoEm: FieldRef<"Usuario", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario updateManyAndReturn
   */
  export type UsuarioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario.redacoes
   */
  export type Usuario$redacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Redacao
     */
    select?: RedacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Redacao
     */
    omit?: RedacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedacaoInclude<ExtArgs> | null
    where?: RedacaoWhereInput
    orderBy?: RedacaoOrderByWithRelationInput | RedacaoOrderByWithRelationInput[]
    cursor?: RedacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RedacaoScalarFieldEnum | RedacaoScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Questao
   */

  export type AggregateQuestao = {
    _count: QuestaoCountAggregateOutputType | null
    _avg: QuestaoAvgAggregateOutputType | null
    _sum: QuestaoSumAggregateOutputType | null
    _min: QuestaoMinAggregateOutputType | null
    _max: QuestaoMaxAggregateOutputType | null
  }

  export type QuestaoAvgAggregateOutputType = {
    ano: number | null
    peso: number | null
  }

  export type QuestaoSumAggregateOutputType = {
    ano: number | null
    peso: number | null
  }

  export type QuestaoMinAggregateOutputType = {
    id: string | null
    ano: number | null
    curso: string | null
    materia: string | null
    categoria: string | null
    enunciado: string | null
    alternativaA: string | null
    alternativaB: string | null
    alternativaC: string | null
    alternativaD: string | null
    alternativaE: string | null
    respostaCorreta: string | null
    peso: number | null
  }

  export type QuestaoMaxAggregateOutputType = {
    id: string | null
    ano: number | null
    curso: string | null
    materia: string | null
    categoria: string | null
    enunciado: string | null
    alternativaA: string | null
    alternativaB: string | null
    alternativaC: string | null
    alternativaD: string | null
    alternativaE: string | null
    respostaCorreta: string | null
    peso: number | null
  }

  export type QuestaoCountAggregateOutputType = {
    id: number
    ano: number
    curso: number
    materia: number
    categoria: number
    enunciado: number
    alternativaA: number
    alternativaB: number
    alternativaC: number
    alternativaD: number
    alternativaE: number
    respostaCorreta: number
    peso: number
    _all: number
  }


  export type QuestaoAvgAggregateInputType = {
    ano?: true
    peso?: true
  }

  export type QuestaoSumAggregateInputType = {
    ano?: true
    peso?: true
  }

  export type QuestaoMinAggregateInputType = {
    id?: true
    ano?: true
    curso?: true
    materia?: true
    categoria?: true
    enunciado?: true
    alternativaA?: true
    alternativaB?: true
    alternativaC?: true
    alternativaD?: true
    alternativaE?: true
    respostaCorreta?: true
    peso?: true
  }

  export type QuestaoMaxAggregateInputType = {
    id?: true
    ano?: true
    curso?: true
    materia?: true
    categoria?: true
    enunciado?: true
    alternativaA?: true
    alternativaB?: true
    alternativaC?: true
    alternativaD?: true
    alternativaE?: true
    respostaCorreta?: true
    peso?: true
  }

  export type QuestaoCountAggregateInputType = {
    id?: true
    ano?: true
    curso?: true
    materia?: true
    categoria?: true
    enunciado?: true
    alternativaA?: true
    alternativaB?: true
    alternativaC?: true
    alternativaD?: true
    alternativaE?: true
    respostaCorreta?: true
    peso?: true
    _all?: true
  }

  export type QuestaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questao to aggregate.
     */
    where?: QuestaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questaos to fetch.
     */
    orderBy?: QuestaoOrderByWithRelationInput | QuestaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questaos
    **/
    _count?: true | QuestaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestaoMaxAggregateInputType
  }

  export type GetQuestaoAggregateType<T extends QuestaoAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestao[P]>
      : GetScalarType<T[P], AggregateQuestao[P]>
  }




  export type QuestaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestaoWhereInput
    orderBy?: QuestaoOrderByWithAggregationInput | QuestaoOrderByWithAggregationInput[]
    by: QuestaoScalarFieldEnum[] | QuestaoScalarFieldEnum
    having?: QuestaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestaoCountAggregateInputType | true
    _avg?: QuestaoAvgAggregateInputType
    _sum?: QuestaoSumAggregateInputType
    _min?: QuestaoMinAggregateInputType
    _max?: QuestaoMaxAggregateInputType
  }

  export type QuestaoGroupByOutputType = {
    id: string
    ano: number
    curso: string
    materia: string
    categoria: string
    enunciado: string
    alternativaA: string
    alternativaB: string
    alternativaC: string
    alternativaD: string
    alternativaE: string
    respostaCorreta: string
    peso: number
    _count: QuestaoCountAggregateOutputType | null
    _avg: QuestaoAvgAggregateOutputType | null
    _sum: QuestaoSumAggregateOutputType | null
    _min: QuestaoMinAggregateOutputType | null
    _max: QuestaoMaxAggregateOutputType | null
  }

  type GetQuestaoGroupByPayload<T extends QuestaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestaoGroupByOutputType[P]>
            : GetScalarType<T[P], QuestaoGroupByOutputType[P]>
        }
      >
    >


  export type QuestaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ano?: boolean
    curso?: boolean
    materia?: boolean
    categoria?: boolean
    enunciado?: boolean
    alternativaA?: boolean
    alternativaB?: boolean
    alternativaC?: boolean
    alternativaD?: boolean
    alternativaE?: boolean
    respostaCorreta?: boolean
    peso?: boolean
    simulados?: boolean | Questao$simuladosArgs<ExtArgs>
    _count?: boolean | QuestaoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questao"]>

  export type QuestaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ano?: boolean
    curso?: boolean
    materia?: boolean
    categoria?: boolean
    enunciado?: boolean
    alternativaA?: boolean
    alternativaB?: boolean
    alternativaC?: boolean
    alternativaD?: boolean
    alternativaE?: boolean
    respostaCorreta?: boolean
    peso?: boolean
  }, ExtArgs["result"]["questao"]>

  export type QuestaoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ano?: boolean
    curso?: boolean
    materia?: boolean
    categoria?: boolean
    enunciado?: boolean
    alternativaA?: boolean
    alternativaB?: boolean
    alternativaC?: boolean
    alternativaD?: boolean
    alternativaE?: boolean
    respostaCorreta?: boolean
    peso?: boolean
  }, ExtArgs["result"]["questao"]>

  export type QuestaoSelectScalar = {
    id?: boolean
    ano?: boolean
    curso?: boolean
    materia?: boolean
    categoria?: boolean
    enunciado?: boolean
    alternativaA?: boolean
    alternativaB?: boolean
    alternativaC?: boolean
    alternativaD?: boolean
    alternativaE?: boolean
    respostaCorreta?: boolean
    peso?: boolean
  }

  export type QuestaoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ano" | "curso" | "materia" | "categoria" | "enunciado" | "alternativaA" | "alternativaB" | "alternativaC" | "alternativaD" | "alternativaE" | "respostaCorreta" | "peso", ExtArgs["result"]["questao"]>
  export type QuestaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    simulados?: boolean | Questao$simuladosArgs<ExtArgs>
    _count?: boolean | QuestaoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type QuestaoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $QuestaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Questao"
    objects: {
      simulados: Prisma.$SimuladoQuestaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ano: number
      curso: string
      materia: string
      categoria: string
      enunciado: string
      alternativaA: string
      alternativaB: string
      alternativaC: string
      alternativaD: string
      alternativaE: string
      respostaCorreta: string
      peso: number
    }, ExtArgs["result"]["questao"]>
    composites: {}
  }

  type QuestaoGetPayload<S extends boolean | null | undefined | QuestaoDefaultArgs> = $Result.GetResult<Prisma.$QuestaoPayload, S>

  type QuestaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestaoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestaoCountAggregateInputType | true
    }

  export interface QuestaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Questao'], meta: { name: 'Questao' } }
    /**
     * Find zero or one Questao that matches the filter.
     * @param {QuestaoFindUniqueArgs} args - Arguments to find a Questao
     * @example
     * // Get one Questao
     * const questao = await prisma.questao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestaoFindUniqueArgs>(args: SelectSubset<T, QuestaoFindUniqueArgs<ExtArgs>>): Prisma__QuestaoClient<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Questao that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestaoFindUniqueOrThrowArgs} args - Arguments to find a Questao
     * @example
     * // Get one Questao
     * const questao = await prisma.questao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestaoFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestaoClient<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Questao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestaoFindFirstArgs} args - Arguments to find a Questao
     * @example
     * // Get one Questao
     * const questao = await prisma.questao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestaoFindFirstArgs>(args?: SelectSubset<T, QuestaoFindFirstArgs<ExtArgs>>): Prisma__QuestaoClient<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Questao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestaoFindFirstOrThrowArgs} args - Arguments to find a Questao
     * @example
     * // Get one Questao
     * const questao = await prisma.questao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestaoFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestaoClient<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Questaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questaos
     * const questaos = await prisma.questao.findMany()
     * 
     * // Get first 10 Questaos
     * const questaos = await prisma.questao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questaoWithIdOnly = await prisma.questao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestaoFindManyArgs>(args?: SelectSubset<T, QuestaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Questao.
     * @param {QuestaoCreateArgs} args - Arguments to create a Questao.
     * @example
     * // Create one Questao
     * const Questao = await prisma.questao.create({
     *   data: {
     *     // ... data to create a Questao
     *   }
     * })
     * 
     */
    create<T extends QuestaoCreateArgs>(args: SelectSubset<T, QuestaoCreateArgs<ExtArgs>>): Prisma__QuestaoClient<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Questaos.
     * @param {QuestaoCreateManyArgs} args - Arguments to create many Questaos.
     * @example
     * // Create many Questaos
     * const questao = await prisma.questao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestaoCreateManyArgs>(args?: SelectSubset<T, QuestaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Questaos and returns the data saved in the database.
     * @param {QuestaoCreateManyAndReturnArgs} args - Arguments to create many Questaos.
     * @example
     * // Create many Questaos
     * const questao = await prisma.questao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Questaos and only return the `id`
     * const questaoWithIdOnly = await prisma.questao.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestaoCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Questao.
     * @param {QuestaoDeleteArgs} args - Arguments to delete one Questao.
     * @example
     * // Delete one Questao
     * const Questao = await prisma.questao.delete({
     *   where: {
     *     // ... filter to delete one Questao
     *   }
     * })
     * 
     */
    delete<T extends QuestaoDeleteArgs>(args: SelectSubset<T, QuestaoDeleteArgs<ExtArgs>>): Prisma__QuestaoClient<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Questao.
     * @param {QuestaoUpdateArgs} args - Arguments to update one Questao.
     * @example
     * // Update one Questao
     * const questao = await prisma.questao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestaoUpdateArgs>(args: SelectSubset<T, QuestaoUpdateArgs<ExtArgs>>): Prisma__QuestaoClient<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Questaos.
     * @param {QuestaoDeleteManyArgs} args - Arguments to filter Questaos to delete.
     * @example
     * // Delete a few Questaos
     * const { count } = await prisma.questao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestaoDeleteManyArgs>(args?: SelectSubset<T, QuestaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questaos
     * const questao = await prisma.questao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestaoUpdateManyArgs>(args: SelectSubset<T, QuestaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questaos and returns the data updated in the database.
     * @param {QuestaoUpdateManyAndReturnArgs} args - Arguments to update many Questaos.
     * @example
     * // Update many Questaos
     * const questao = await prisma.questao.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Questaos and only return the `id`
     * const questaoWithIdOnly = await prisma.questao.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestaoUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestaoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Questao.
     * @param {QuestaoUpsertArgs} args - Arguments to update or create a Questao.
     * @example
     * // Update or create a Questao
     * const questao = await prisma.questao.upsert({
     *   create: {
     *     // ... data to create a Questao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Questao we want to update
     *   }
     * })
     */
    upsert<T extends QuestaoUpsertArgs>(args: SelectSubset<T, QuestaoUpsertArgs<ExtArgs>>): Prisma__QuestaoClient<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Questaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestaoCountArgs} args - Arguments to filter Questaos to count.
     * @example
     * // Count the number of Questaos
     * const count = await prisma.questao.count({
     *   where: {
     *     // ... the filter for the Questaos we want to count
     *   }
     * })
    **/
    count<T extends QuestaoCountArgs>(
      args?: Subset<T, QuestaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Questao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestaoAggregateArgs>(args: Subset<T, QuestaoAggregateArgs>): Prisma.PrismaPromise<GetQuestaoAggregateType<T>>

    /**
     * Group by Questao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestaoGroupByArgs['orderBy'] }
        : { orderBy?: QuestaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Questao model
   */
  readonly fields: QuestaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Questao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    simulados<T extends Questao$simuladosArgs<ExtArgs> = {}>(args?: Subset<T, Questao$simuladosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SimuladoQuestaoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Questao model
   */ 
  interface QuestaoFieldRefs {
    readonly id: FieldRef<"Questao", 'String'>
    readonly ano: FieldRef<"Questao", 'Int'>
    readonly curso: FieldRef<"Questao", 'String'>
    readonly materia: FieldRef<"Questao", 'String'>
    readonly categoria: FieldRef<"Questao", 'String'>
    readonly enunciado: FieldRef<"Questao", 'String'>
    readonly alternativaA: FieldRef<"Questao", 'String'>
    readonly alternativaB: FieldRef<"Questao", 'String'>
    readonly alternativaC: FieldRef<"Questao", 'String'>
    readonly alternativaD: FieldRef<"Questao", 'String'>
    readonly alternativaE: FieldRef<"Questao", 'String'>
    readonly respostaCorreta: FieldRef<"Questao", 'String'>
    readonly peso: FieldRef<"Questao", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Questao findUnique
   */
  export type QuestaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questao
     */
    omit?: QuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestaoInclude<ExtArgs> | null
    /**
     * Filter, which Questao to fetch.
     */
    where: QuestaoWhereUniqueInput
  }

  /**
   * Questao findUniqueOrThrow
   */
  export type QuestaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questao
     */
    omit?: QuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestaoInclude<ExtArgs> | null
    /**
     * Filter, which Questao to fetch.
     */
    where: QuestaoWhereUniqueInput
  }

  /**
   * Questao findFirst
   */
  export type QuestaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questao
     */
    omit?: QuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestaoInclude<ExtArgs> | null
    /**
     * Filter, which Questao to fetch.
     */
    where?: QuestaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questaos to fetch.
     */
    orderBy?: QuestaoOrderByWithRelationInput | QuestaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questaos.
     */
    cursor?: QuestaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questaos.
     */
    distinct?: QuestaoScalarFieldEnum | QuestaoScalarFieldEnum[]
  }

  /**
   * Questao findFirstOrThrow
   */
  export type QuestaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questao
     */
    omit?: QuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestaoInclude<ExtArgs> | null
    /**
     * Filter, which Questao to fetch.
     */
    where?: QuestaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questaos to fetch.
     */
    orderBy?: QuestaoOrderByWithRelationInput | QuestaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questaos.
     */
    cursor?: QuestaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questaos.
     */
    distinct?: QuestaoScalarFieldEnum | QuestaoScalarFieldEnum[]
  }

  /**
   * Questao findMany
   */
  export type QuestaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questao
     */
    omit?: QuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestaoInclude<ExtArgs> | null
    /**
     * Filter, which Questaos to fetch.
     */
    where?: QuestaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questaos to fetch.
     */
    orderBy?: QuestaoOrderByWithRelationInput | QuestaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questaos.
     */
    cursor?: QuestaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questaos.
     */
    skip?: number
    distinct?: QuestaoScalarFieldEnum | QuestaoScalarFieldEnum[]
  }

  /**
   * Questao create
   */
  export type QuestaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questao
     */
    omit?: QuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Questao.
     */
    data: XOR<QuestaoCreateInput, QuestaoUncheckedCreateInput>
  }

  /**
   * Questao createMany
   */
  export type QuestaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questaos.
     */
    data: QuestaoCreateManyInput | QuestaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Questao createManyAndReturn
   */
  export type QuestaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Questao
     */
    omit?: QuestaoOmit<ExtArgs> | null
    /**
     * The data used to create many Questaos.
     */
    data: QuestaoCreateManyInput | QuestaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Questao update
   */
  export type QuestaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questao
     */
    omit?: QuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Questao.
     */
    data: XOR<QuestaoUpdateInput, QuestaoUncheckedUpdateInput>
    /**
     * Choose, which Questao to update.
     */
    where: QuestaoWhereUniqueInput
  }

  /**
   * Questao updateMany
   */
  export type QuestaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questaos.
     */
    data: XOR<QuestaoUpdateManyMutationInput, QuestaoUncheckedUpdateManyInput>
    /**
     * Filter which Questaos to update
     */
    where?: QuestaoWhereInput
    /**
     * Limit how many Questaos to update.
     */
    limit?: number
  }

  /**
   * Questao updateManyAndReturn
   */
  export type QuestaoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Questao
     */
    omit?: QuestaoOmit<ExtArgs> | null
    /**
     * The data used to update Questaos.
     */
    data: XOR<QuestaoUpdateManyMutationInput, QuestaoUncheckedUpdateManyInput>
    /**
     * Filter which Questaos to update
     */
    where?: QuestaoWhereInput
    /**
     * Limit how many Questaos to update.
     */
    limit?: number
  }

  /**
   * Questao upsert
   */
  export type QuestaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questao
     */
    omit?: QuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Questao to update in case it exists.
     */
    where: QuestaoWhereUniqueInput
    /**
     * In case the Questao found by the `where` argument doesn't exist, create a new Questao with this data.
     */
    create: XOR<QuestaoCreateInput, QuestaoUncheckedCreateInput>
    /**
     * In case the Questao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestaoUpdateInput, QuestaoUncheckedUpdateInput>
  }

  /**
   * Questao delete
   */
  export type QuestaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questao
     */
    omit?: QuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestaoInclude<ExtArgs> | null
    /**
     * Filter which Questao to delete.
     */
    where: QuestaoWhereUniqueInput
  }

  /**
   * Questao deleteMany
   */
  export type QuestaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questaos to delete
     */
    where?: QuestaoWhereInput
    /**
     * Limit how many Questaos to delete.
     */
    limit?: number
  }

  /**
   * Questao.simulados
   */
  export type Questao$simuladosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimuladoQuestao
     */
    select?: SimuladoQuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SimuladoQuestao
     */
    omit?: SimuladoQuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoQuestaoInclude<ExtArgs> | null
    where?: SimuladoQuestaoWhereInput
    orderBy?: SimuladoQuestaoOrderByWithRelationInput | SimuladoQuestaoOrderByWithRelationInput[]
    cursor?: SimuladoQuestaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SimuladoQuestaoScalarFieldEnum | SimuladoQuestaoScalarFieldEnum[]
  }

  /**
   * Questao without action
   */
  export type QuestaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questao
     */
    omit?: QuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestaoInclude<ExtArgs> | null
  }


  /**
   * Model Simulado
   */

  export type AggregateSimulado = {
    _count: SimuladoCountAggregateOutputType | null
    _min: SimuladoMinAggregateOutputType | null
    _max: SimuladoMaxAggregateOutputType | null
  }

  export type SimuladoMinAggregateOutputType = {
    id: string | null
    nome: string | null
    curso: string | null
    criadoEm: Date | null
  }

  export type SimuladoMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    curso: string | null
    criadoEm: Date | null
  }

  export type SimuladoCountAggregateOutputType = {
    id: number
    nome: number
    curso: number
    criadoEm: number
    _all: number
  }


  export type SimuladoMinAggregateInputType = {
    id?: true
    nome?: true
    curso?: true
    criadoEm?: true
  }

  export type SimuladoMaxAggregateInputType = {
    id?: true
    nome?: true
    curso?: true
    criadoEm?: true
  }

  export type SimuladoCountAggregateInputType = {
    id?: true
    nome?: true
    curso?: true
    criadoEm?: true
    _all?: true
  }

  export type SimuladoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Simulado to aggregate.
     */
    where?: SimuladoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Simulados to fetch.
     */
    orderBy?: SimuladoOrderByWithRelationInput | SimuladoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SimuladoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Simulados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Simulados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Simulados
    **/
    _count?: true | SimuladoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SimuladoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SimuladoMaxAggregateInputType
  }

  export type GetSimuladoAggregateType<T extends SimuladoAggregateArgs> = {
        [P in keyof T & keyof AggregateSimulado]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSimulado[P]>
      : GetScalarType<T[P], AggregateSimulado[P]>
  }




  export type SimuladoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SimuladoWhereInput
    orderBy?: SimuladoOrderByWithAggregationInput | SimuladoOrderByWithAggregationInput[]
    by: SimuladoScalarFieldEnum[] | SimuladoScalarFieldEnum
    having?: SimuladoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SimuladoCountAggregateInputType | true
    _min?: SimuladoMinAggregateInputType
    _max?: SimuladoMaxAggregateInputType
  }

  export type SimuladoGroupByOutputType = {
    id: string
    nome: string
    curso: string
    criadoEm: Date
    _count: SimuladoCountAggregateOutputType | null
    _min: SimuladoMinAggregateOutputType | null
    _max: SimuladoMaxAggregateOutputType | null
  }

  type GetSimuladoGroupByPayload<T extends SimuladoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SimuladoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SimuladoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SimuladoGroupByOutputType[P]>
            : GetScalarType<T[P], SimuladoGroupByOutputType[P]>
        }
      >
    >


  export type SimuladoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    curso?: boolean
    criadoEm?: boolean
    questoes?: boolean | Simulado$questoesArgs<ExtArgs>
    _count?: boolean | SimuladoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["simulado"]>

  export type SimuladoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    curso?: boolean
    criadoEm?: boolean
  }, ExtArgs["result"]["simulado"]>

  export type SimuladoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    curso?: boolean
    criadoEm?: boolean
  }, ExtArgs["result"]["simulado"]>

  export type SimuladoSelectScalar = {
    id?: boolean
    nome?: boolean
    curso?: boolean
    criadoEm?: boolean
  }

  export type SimuladoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "curso" | "criadoEm", ExtArgs["result"]["simulado"]>
  export type SimuladoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questoes?: boolean | Simulado$questoesArgs<ExtArgs>
    _count?: boolean | SimuladoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SimuladoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SimuladoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SimuladoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Simulado"
    objects: {
      questoes: Prisma.$SimuladoQuestaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      curso: string
      criadoEm: Date
    }, ExtArgs["result"]["simulado"]>
    composites: {}
  }

  type SimuladoGetPayload<S extends boolean | null | undefined | SimuladoDefaultArgs> = $Result.GetResult<Prisma.$SimuladoPayload, S>

  type SimuladoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SimuladoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SimuladoCountAggregateInputType | true
    }

  export interface SimuladoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Simulado'], meta: { name: 'Simulado' } }
    /**
     * Find zero or one Simulado that matches the filter.
     * @param {SimuladoFindUniqueArgs} args - Arguments to find a Simulado
     * @example
     * // Get one Simulado
     * const simulado = await prisma.simulado.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SimuladoFindUniqueArgs>(args: SelectSubset<T, SimuladoFindUniqueArgs<ExtArgs>>): Prisma__SimuladoClient<$Result.GetResult<Prisma.$SimuladoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Simulado that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SimuladoFindUniqueOrThrowArgs} args - Arguments to find a Simulado
     * @example
     * // Get one Simulado
     * const simulado = await prisma.simulado.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SimuladoFindUniqueOrThrowArgs>(args: SelectSubset<T, SimuladoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SimuladoClient<$Result.GetResult<Prisma.$SimuladoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Simulado that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimuladoFindFirstArgs} args - Arguments to find a Simulado
     * @example
     * // Get one Simulado
     * const simulado = await prisma.simulado.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SimuladoFindFirstArgs>(args?: SelectSubset<T, SimuladoFindFirstArgs<ExtArgs>>): Prisma__SimuladoClient<$Result.GetResult<Prisma.$SimuladoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Simulado that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimuladoFindFirstOrThrowArgs} args - Arguments to find a Simulado
     * @example
     * // Get one Simulado
     * const simulado = await prisma.simulado.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SimuladoFindFirstOrThrowArgs>(args?: SelectSubset<T, SimuladoFindFirstOrThrowArgs<ExtArgs>>): Prisma__SimuladoClient<$Result.GetResult<Prisma.$SimuladoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Simulados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimuladoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Simulados
     * const simulados = await prisma.simulado.findMany()
     * 
     * // Get first 10 Simulados
     * const simulados = await prisma.simulado.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const simuladoWithIdOnly = await prisma.simulado.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SimuladoFindManyArgs>(args?: SelectSubset<T, SimuladoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SimuladoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Simulado.
     * @param {SimuladoCreateArgs} args - Arguments to create a Simulado.
     * @example
     * // Create one Simulado
     * const Simulado = await prisma.simulado.create({
     *   data: {
     *     // ... data to create a Simulado
     *   }
     * })
     * 
     */
    create<T extends SimuladoCreateArgs>(args: SelectSubset<T, SimuladoCreateArgs<ExtArgs>>): Prisma__SimuladoClient<$Result.GetResult<Prisma.$SimuladoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Simulados.
     * @param {SimuladoCreateManyArgs} args - Arguments to create many Simulados.
     * @example
     * // Create many Simulados
     * const simulado = await prisma.simulado.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SimuladoCreateManyArgs>(args?: SelectSubset<T, SimuladoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Simulados and returns the data saved in the database.
     * @param {SimuladoCreateManyAndReturnArgs} args - Arguments to create many Simulados.
     * @example
     * // Create many Simulados
     * const simulado = await prisma.simulado.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Simulados and only return the `id`
     * const simuladoWithIdOnly = await prisma.simulado.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SimuladoCreateManyAndReturnArgs>(args?: SelectSubset<T, SimuladoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SimuladoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Simulado.
     * @param {SimuladoDeleteArgs} args - Arguments to delete one Simulado.
     * @example
     * // Delete one Simulado
     * const Simulado = await prisma.simulado.delete({
     *   where: {
     *     // ... filter to delete one Simulado
     *   }
     * })
     * 
     */
    delete<T extends SimuladoDeleteArgs>(args: SelectSubset<T, SimuladoDeleteArgs<ExtArgs>>): Prisma__SimuladoClient<$Result.GetResult<Prisma.$SimuladoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Simulado.
     * @param {SimuladoUpdateArgs} args - Arguments to update one Simulado.
     * @example
     * // Update one Simulado
     * const simulado = await prisma.simulado.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SimuladoUpdateArgs>(args: SelectSubset<T, SimuladoUpdateArgs<ExtArgs>>): Prisma__SimuladoClient<$Result.GetResult<Prisma.$SimuladoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Simulados.
     * @param {SimuladoDeleteManyArgs} args - Arguments to filter Simulados to delete.
     * @example
     * // Delete a few Simulados
     * const { count } = await prisma.simulado.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SimuladoDeleteManyArgs>(args?: SelectSubset<T, SimuladoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Simulados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimuladoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Simulados
     * const simulado = await prisma.simulado.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SimuladoUpdateManyArgs>(args: SelectSubset<T, SimuladoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Simulados and returns the data updated in the database.
     * @param {SimuladoUpdateManyAndReturnArgs} args - Arguments to update many Simulados.
     * @example
     * // Update many Simulados
     * const simulado = await prisma.simulado.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Simulados and only return the `id`
     * const simuladoWithIdOnly = await prisma.simulado.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SimuladoUpdateManyAndReturnArgs>(args: SelectSubset<T, SimuladoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SimuladoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Simulado.
     * @param {SimuladoUpsertArgs} args - Arguments to update or create a Simulado.
     * @example
     * // Update or create a Simulado
     * const simulado = await prisma.simulado.upsert({
     *   create: {
     *     // ... data to create a Simulado
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Simulado we want to update
     *   }
     * })
     */
    upsert<T extends SimuladoUpsertArgs>(args: SelectSubset<T, SimuladoUpsertArgs<ExtArgs>>): Prisma__SimuladoClient<$Result.GetResult<Prisma.$SimuladoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Simulados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimuladoCountArgs} args - Arguments to filter Simulados to count.
     * @example
     * // Count the number of Simulados
     * const count = await prisma.simulado.count({
     *   where: {
     *     // ... the filter for the Simulados we want to count
     *   }
     * })
    **/
    count<T extends SimuladoCountArgs>(
      args?: Subset<T, SimuladoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SimuladoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Simulado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimuladoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SimuladoAggregateArgs>(args: Subset<T, SimuladoAggregateArgs>): Prisma.PrismaPromise<GetSimuladoAggregateType<T>>

    /**
     * Group by Simulado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimuladoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SimuladoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SimuladoGroupByArgs['orderBy'] }
        : { orderBy?: SimuladoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SimuladoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSimuladoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Simulado model
   */
  readonly fields: SimuladoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Simulado.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SimuladoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questoes<T extends Simulado$questoesArgs<ExtArgs> = {}>(args?: Subset<T, Simulado$questoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SimuladoQuestaoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Simulado model
   */ 
  interface SimuladoFieldRefs {
    readonly id: FieldRef<"Simulado", 'String'>
    readonly nome: FieldRef<"Simulado", 'String'>
    readonly curso: FieldRef<"Simulado", 'String'>
    readonly criadoEm: FieldRef<"Simulado", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Simulado findUnique
   */
  export type SimuladoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulado
     */
    select?: SimuladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Simulado
     */
    omit?: SimuladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoInclude<ExtArgs> | null
    /**
     * Filter, which Simulado to fetch.
     */
    where: SimuladoWhereUniqueInput
  }

  /**
   * Simulado findUniqueOrThrow
   */
  export type SimuladoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulado
     */
    select?: SimuladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Simulado
     */
    omit?: SimuladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoInclude<ExtArgs> | null
    /**
     * Filter, which Simulado to fetch.
     */
    where: SimuladoWhereUniqueInput
  }

  /**
   * Simulado findFirst
   */
  export type SimuladoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulado
     */
    select?: SimuladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Simulado
     */
    omit?: SimuladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoInclude<ExtArgs> | null
    /**
     * Filter, which Simulado to fetch.
     */
    where?: SimuladoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Simulados to fetch.
     */
    orderBy?: SimuladoOrderByWithRelationInput | SimuladoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Simulados.
     */
    cursor?: SimuladoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Simulados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Simulados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Simulados.
     */
    distinct?: SimuladoScalarFieldEnum | SimuladoScalarFieldEnum[]
  }

  /**
   * Simulado findFirstOrThrow
   */
  export type SimuladoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulado
     */
    select?: SimuladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Simulado
     */
    omit?: SimuladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoInclude<ExtArgs> | null
    /**
     * Filter, which Simulado to fetch.
     */
    where?: SimuladoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Simulados to fetch.
     */
    orderBy?: SimuladoOrderByWithRelationInput | SimuladoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Simulados.
     */
    cursor?: SimuladoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Simulados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Simulados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Simulados.
     */
    distinct?: SimuladoScalarFieldEnum | SimuladoScalarFieldEnum[]
  }

  /**
   * Simulado findMany
   */
  export type SimuladoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulado
     */
    select?: SimuladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Simulado
     */
    omit?: SimuladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoInclude<ExtArgs> | null
    /**
     * Filter, which Simulados to fetch.
     */
    where?: SimuladoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Simulados to fetch.
     */
    orderBy?: SimuladoOrderByWithRelationInput | SimuladoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Simulados.
     */
    cursor?: SimuladoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Simulados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Simulados.
     */
    skip?: number
    distinct?: SimuladoScalarFieldEnum | SimuladoScalarFieldEnum[]
  }

  /**
   * Simulado create
   */
  export type SimuladoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulado
     */
    select?: SimuladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Simulado
     */
    omit?: SimuladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoInclude<ExtArgs> | null
    /**
     * The data needed to create a Simulado.
     */
    data: XOR<SimuladoCreateInput, SimuladoUncheckedCreateInput>
  }

  /**
   * Simulado createMany
   */
  export type SimuladoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Simulados.
     */
    data: SimuladoCreateManyInput | SimuladoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Simulado createManyAndReturn
   */
  export type SimuladoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulado
     */
    select?: SimuladoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Simulado
     */
    omit?: SimuladoOmit<ExtArgs> | null
    /**
     * The data used to create many Simulados.
     */
    data: SimuladoCreateManyInput | SimuladoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Simulado update
   */
  export type SimuladoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulado
     */
    select?: SimuladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Simulado
     */
    omit?: SimuladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoInclude<ExtArgs> | null
    /**
     * The data needed to update a Simulado.
     */
    data: XOR<SimuladoUpdateInput, SimuladoUncheckedUpdateInput>
    /**
     * Choose, which Simulado to update.
     */
    where: SimuladoWhereUniqueInput
  }

  /**
   * Simulado updateMany
   */
  export type SimuladoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Simulados.
     */
    data: XOR<SimuladoUpdateManyMutationInput, SimuladoUncheckedUpdateManyInput>
    /**
     * Filter which Simulados to update
     */
    where?: SimuladoWhereInput
    /**
     * Limit how many Simulados to update.
     */
    limit?: number
  }

  /**
   * Simulado updateManyAndReturn
   */
  export type SimuladoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulado
     */
    select?: SimuladoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Simulado
     */
    omit?: SimuladoOmit<ExtArgs> | null
    /**
     * The data used to update Simulados.
     */
    data: XOR<SimuladoUpdateManyMutationInput, SimuladoUncheckedUpdateManyInput>
    /**
     * Filter which Simulados to update
     */
    where?: SimuladoWhereInput
    /**
     * Limit how many Simulados to update.
     */
    limit?: number
  }

  /**
   * Simulado upsert
   */
  export type SimuladoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulado
     */
    select?: SimuladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Simulado
     */
    omit?: SimuladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoInclude<ExtArgs> | null
    /**
     * The filter to search for the Simulado to update in case it exists.
     */
    where: SimuladoWhereUniqueInput
    /**
     * In case the Simulado found by the `where` argument doesn't exist, create a new Simulado with this data.
     */
    create: XOR<SimuladoCreateInput, SimuladoUncheckedCreateInput>
    /**
     * In case the Simulado was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SimuladoUpdateInput, SimuladoUncheckedUpdateInput>
  }

  /**
   * Simulado delete
   */
  export type SimuladoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulado
     */
    select?: SimuladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Simulado
     */
    omit?: SimuladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoInclude<ExtArgs> | null
    /**
     * Filter which Simulado to delete.
     */
    where: SimuladoWhereUniqueInput
  }

  /**
   * Simulado deleteMany
   */
  export type SimuladoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Simulados to delete
     */
    where?: SimuladoWhereInput
    /**
     * Limit how many Simulados to delete.
     */
    limit?: number
  }

  /**
   * Simulado.questoes
   */
  export type Simulado$questoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimuladoQuestao
     */
    select?: SimuladoQuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SimuladoQuestao
     */
    omit?: SimuladoQuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoQuestaoInclude<ExtArgs> | null
    where?: SimuladoQuestaoWhereInput
    orderBy?: SimuladoQuestaoOrderByWithRelationInput | SimuladoQuestaoOrderByWithRelationInput[]
    cursor?: SimuladoQuestaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SimuladoQuestaoScalarFieldEnum | SimuladoQuestaoScalarFieldEnum[]
  }

  /**
   * Simulado without action
   */
  export type SimuladoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulado
     */
    select?: SimuladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Simulado
     */
    omit?: SimuladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoInclude<ExtArgs> | null
  }


  /**
   * Model SimuladoQuestao
   */

  export type AggregateSimuladoQuestao = {
    _count: SimuladoQuestaoCountAggregateOutputType | null
    _avg: SimuladoQuestaoAvgAggregateOutputType | null
    _sum: SimuladoQuestaoSumAggregateOutputType | null
    _min: SimuladoQuestaoMinAggregateOutputType | null
    _max: SimuladoQuestaoMaxAggregateOutputType | null
  }

  export type SimuladoQuestaoAvgAggregateOutputType = {
    posicao: number | null
  }

  export type SimuladoQuestaoSumAggregateOutputType = {
    posicao: number | null
  }

  export type SimuladoQuestaoMinAggregateOutputType = {
    id: string | null
    questaoId: string | null
    simuladoId: string | null
    posicao: number | null
  }

  export type SimuladoQuestaoMaxAggregateOutputType = {
    id: string | null
    questaoId: string | null
    simuladoId: string | null
    posicao: number | null
  }

  export type SimuladoQuestaoCountAggregateOutputType = {
    id: number
    questaoId: number
    simuladoId: number
    posicao: number
    _all: number
  }


  export type SimuladoQuestaoAvgAggregateInputType = {
    posicao?: true
  }

  export type SimuladoQuestaoSumAggregateInputType = {
    posicao?: true
  }

  export type SimuladoQuestaoMinAggregateInputType = {
    id?: true
    questaoId?: true
    simuladoId?: true
    posicao?: true
  }

  export type SimuladoQuestaoMaxAggregateInputType = {
    id?: true
    questaoId?: true
    simuladoId?: true
    posicao?: true
  }

  export type SimuladoQuestaoCountAggregateInputType = {
    id?: true
    questaoId?: true
    simuladoId?: true
    posicao?: true
    _all?: true
  }

  export type SimuladoQuestaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SimuladoQuestao to aggregate.
     */
    where?: SimuladoQuestaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SimuladoQuestaos to fetch.
     */
    orderBy?: SimuladoQuestaoOrderByWithRelationInput | SimuladoQuestaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SimuladoQuestaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SimuladoQuestaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SimuladoQuestaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SimuladoQuestaos
    **/
    _count?: true | SimuladoQuestaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SimuladoQuestaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SimuladoQuestaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SimuladoQuestaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SimuladoQuestaoMaxAggregateInputType
  }

  export type GetSimuladoQuestaoAggregateType<T extends SimuladoQuestaoAggregateArgs> = {
        [P in keyof T & keyof AggregateSimuladoQuestao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSimuladoQuestao[P]>
      : GetScalarType<T[P], AggregateSimuladoQuestao[P]>
  }




  export type SimuladoQuestaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SimuladoQuestaoWhereInput
    orderBy?: SimuladoQuestaoOrderByWithAggregationInput | SimuladoQuestaoOrderByWithAggregationInput[]
    by: SimuladoQuestaoScalarFieldEnum[] | SimuladoQuestaoScalarFieldEnum
    having?: SimuladoQuestaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SimuladoQuestaoCountAggregateInputType | true
    _avg?: SimuladoQuestaoAvgAggregateInputType
    _sum?: SimuladoQuestaoSumAggregateInputType
    _min?: SimuladoQuestaoMinAggregateInputType
    _max?: SimuladoQuestaoMaxAggregateInputType
  }

  export type SimuladoQuestaoGroupByOutputType = {
    id: string
    questaoId: string
    simuladoId: string
    posicao: number
    _count: SimuladoQuestaoCountAggregateOutputType | null
    _avg: SimuladoQuestaoAvgAggregateOutputType | null
    _sum: SimuladoQuestaoSumAggregateOutputType | null
    _min: SimuladoQuestaoMinAggregateOutputType | null
    _max: SimuladoQuestaoMaxAggregateOutputType | null
  }

  type GetSimuladoQuestaoGroupByPayload<T extends SimuladoQuestaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SimuladoQuestaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SimuladoQuestaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SimuladoQuestaoGroupByOutputType[P]>
            : GetScalarType<T[P], SimuladoQuestaoGroupByOutputType[P]>
        }
      >
    >


  export type SimuladoQuestaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questaoId?: boolean
    simuladoId?: boolean
    posicao?: boolean
    questao?: boolean | QuestaoDefaultArgs<ExtArgs>
    simulado?: boolean | SimuladoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["simuladoQuestao"]>

  export type SimuladoQuestaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questaoId?: boolean
    simuladoId?: boolean
    posicao?: boolean
    questao?: boolean | QuestaoDefaultArgs<ExtArgs>
    simulado?: boolean | SimuladoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["simuladoQuestao"]>

  export type SimuladoQuestaoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questaoId?: boolean
    simuladoId?: boolean
    posicao?: boolean
    questao?: boolean | QuestaoDefaultArgs<ExtArgs>
    simulado?: boolean | SimuladoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["simuladoQuestao"]>

  export type SimuladoQuestaoSelectScalar = {
    id?: boolean
    questaoId?: boolean
    simuladoId?: boolean
    posicao?: boolean
  }

  export type SimuladoQuestaoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "questaoId" | "simuladoId" | "posicao", ExtArgs["result"]["simuladoQuestao"]>
  export type SimuladoQuestaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questao?: boolean | QuestaoDefaultArgs<ExtArgs>
    simulado?: boolean | SimuladoDefaultArgs<ExtArgs>
  }
  export type SimuladoQuestaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questao?: boolean | QuestaoDefaultArgs<ExtArgs>
    simulado?: boolean | SimuladoDefaultArgs<ExtArgs>
  }
  export type SimuladoQuestaoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questao?: boolean | QuestaoDefaultArgs<ExtArgs>
    simulado?: boolean | SimuladoDefaultArgs<ExtArgs>
  }

  export type $SimuladoQuestaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SimuladoQuestao"
    objects: {
      questao: Prisma.$QuestaoPayload<ExtArgs>
      simulado: Prisma.$SimuladoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      questaoId: string
      simuladoId: string
      posicao: number
    }, ExtArgs["result"]["simuladoQuestao"]>
    composites: {}
  }

  type SimuladoQuestaoGetPayload<S extends boolean | null | undefined | SimuladoQuestaoDefaultArgs> = $Result.GetResult<Prisma.$SimuladoQuestaoPayload, S>

  type SimuladoQuestaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SimuladoQuestaoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SimuladoQuestaoCountAggregateInputType | true
    }

  export interface SimuladoQuestaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SimuladoQuestao'], meta: { name: 'SimuladoQuestao' } }
    /**
     * Find zero or one SimuladoQuestao that matches the filter.
     * @param {SimuladoQuestaoFindUniqueArgs} args - Arguments to find a SimuladoQuestao
     * @example
     * // Get one SimuladoQuestao
     * const simuladoQuestao = await prisma.simuladoQuestao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SimuladoQuestaoFindUniqueArgs>(args: SelectSubset<T, SimuladoQuestaoFindUniqueArgs<ExtArgs>>): Prisma__SimuladoQuestaoClient<$Result.GetResult<Prisma.$SimuladoQuestaoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SimuladoQuestao that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SimuladoQuestaoFindUniqueOrThrowArgs} args - Arguments to find a SimuladoQuestao
     * @example
     * // Get one SimuladoQuestao
     * const simuladoQuestao = await prisma.simuladoQuestao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SimuladoQuestaoFindUniqueOrThrowArgs>(args: SelectSubset<T, SimuladoQuestaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SimuladoQuestaoClient<$Result.GetResult<Prisma.$SimuladoQuestaoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SimuladoQuestao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimuladoQuestaoFindFirstArgs} args - Arguments to find a SimuladoQuestao
     * @example
     * // Get one SimuladoQuestao
     * const simuladoQuestao = await prisma.simuladoQuestao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SimuladoQuestaoFindFirstArgs>(args?: SelectSubset<T, SimuladoQuestaoFindFirstArgs<ExtArgs>>): Prisma__SimuladoQuestaoClient<$Result.GetResult<Prisma.$SimuladoQuestaoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SimuladoQuestao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimuladoQuestaoFindFirstOrThrowArgs} args - Arguments to find a SimuladoQuestao
     * @example
     * // Get one SimuladoQuestao
     * const simuladoQuestao = await prisma.simuladoQuestao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SimuladoQuestaoFindFirstOrThrowArgs>(args?: SelectSubset<T, SimuladoQuestaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__SimuladoQuestaoClient<$Result.GetResult<Prisma.$SimuladoQuestaoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SimuladoQuestaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimuladoQuestaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SimuladoQuestaos
     * const simuladoQuestaos = await prisma.simuladoQuestao.findMany()
     * 
     * // Get first 10 SimuladoQuestaos
     * const simuladoQuestaos = await prisma.simuladoQuestao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const simuladoQuestaoWithIdOnly = await prisma.simuladoQuestao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SimuladoQuestaoFindManyArgs>(args?: SelectSubset<T, SimuladoQuestaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SimuladoQuestaoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SimuladoQuestao.
     * @param {SimuladoQuestaoCreateArgs} args - Arguments to create a SimuladoQuestao.
     * @example
     * // Create one SimuladoQuestao
     * const SimuladoQuestao = await prisma.simuladoQuestao.create({
     *   data: {
     *     // ... data to create a SimuladoQuestao
     *   }
     * })
     * 
     */
    create<T extends SimuladoQuestaoCreateArgs>(args: SelectSubset<T, SimuladoQuestaoCreateArgs<ExtArgs>>): Prisma__SimuladoQuestaoClient<$Result.GetResult<Prisma.$SimuladoQuestaoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SimuladoQuestaos.
     * @param {SimuladoQuestaoCreateManyArgs} args - Arguments to create many SimuladoQuestaos.
     * @example
     * // Create many SimuladoQuestaos
     * const simuladoQuestao = await prisma.simuladoQuestao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SimuladoQuestaoCreateManyArgs>(args?: SelectSubset<T, SimuladoQuestaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SimuladoQuestaos and returns the data saved in the database.
     * @param {SimuladoQuestaoCreateManyAndReturnArgs} args - Arguments to create many SimuladoQuestaos.
     * @example
     * // Create many SimuladoQuestaos
     * const simuladoQuestao = await prisma.simuladoQuestao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SimuladoQuestaos and only return the `id`
     * const simuladoQuestaoWithIdOnly = await prisma.simuladoQuestao.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SimuladoQuestaoCreateManyAndReturnArgs>(args?: SelectSubset<T, SimuladoQuestaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SimuladoQuestaoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SimuladoQuestao.
     * @param {SimuladoQuestaoDeleteArgs} args - Arguments to delete one SimuladoQuestao.
     * @example
     * // Delete one SimuladoQuestao
     * const SimuladoQuestao = await prisma.simuladoQuestao.delete({
     *   where: {
     *     // ... filter to delete one SimuladoQuestao
     *   }
     * })
     * 
     */
    delete<T extends SimuladoQuestaoDeleteArgs>(args: SelectSubset<T, SimuladoQuestaoDeleteArgs<ExtArgs>>): Prisma__SimuladoQuestaoClient<$Result.GetResult<Prisma.$SimuladoQuestaoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SimuladoQuestao.
     * @param {SimuladoQuestaoUpdateArgs} args - Arguments to update one SimuladoQuestao.
     * @example
     * // Update one SimuladoQuestao
     * const simuladoQuestao = await prisma.simuladoQuestao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SimuladoQuestaoUpdateArgs>(args: SelectSubset<T, SimuladoQuestaoUpdateArgs<ExtArgs>>): Prisma__SimuladoQuestaoClient<$Result.GetResult<Prisma.$SimuladoQuestaoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SimuladoQuestaos.
     * @param {SimuladoQuestaoDeleteManyArgs} args - Arguments to filter SimuladoQuestaos to delete.
     * @example
     * // Delete a few SimuladoQuestaos
     * const { count } = await prisma.simuladoQuestao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SimuladoQuestaoDeleteManyArgs>(args?: SelectSubset<T, SimuladoQuestaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SimuladoQuestaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimuladoQuestaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SimuladoQuestaos
     * const simuladoQuestao = await prisma.simuladoQuestao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SimuladoQuestaoUpdateManyArgs>(args: SelectSubset<T, SimuladoQuestaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SimuladoQuestaos and returns the data updated in the database.
     * @param {SimuladoQuestaoUpdateManyAndReturnArgs} args - Arguments to update many SimuladoQuestaos.
     * @example
     * // Update many SimuladoQuestaos
     * const simuladoQuestao = await prisma.simuladoQuestao.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SimuladoQuestaos and only return the `id`
     * const simuladoQuestaoWithIdOnly = await prisma.simuladoQuestao.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SimuladoQuestaoUpdateManyAndReturnArgs>(args: SelectSubset<T, SimuladoQuestaoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SimuladoQuestaoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SimuladoQuestao.
     * @param {SimuladoQuestaoUpsertArgs} args - Arguments to update or create a SimuladoQuestao.
     * @example
     * // Update or create a SimuladoQuestao
     * const simuladoQuestao = await prisma.simuladoQuestao.upsert({
     *   create: {
     *     // ... data to create a SimuladoQuestao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SimuladoQuestao we want to update
     *   }
     * })
     */
    upsert<T extends SimuladoQuestaoUpsertArgs>(args: SelectSubset<T, SimuladoQuestaoUpsertArgs<ExtArgs>>): Prisma__SimuladoQuestaoClient<$Result.GetResult<Prisma.$SimuladoQuestaoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SimuladoQuestaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimuladoQuestaoCountArgs} args - Arguments to filter SimuladoQuestaos to count.
     * @example
     * // Count the number of SimuladoQuestaos
     * const count = await prisma.simuladoQuestao.count({
     *   where: {
     *     // ... the filter for the SimuladoQuestaos we want to count
     *   }
     * })
    **/
    count<T extends SimuladoQuestaoCountArgs>(
      args?: Subset<T, SimuladoQuestaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SimuladoQuestaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SimuladoQuestao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimuladoQuestaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SimuladoQuestaoAggregateArgs>(args: Subset<T, SimuladoQuestaoAggregateArgs>): Prisma.PrismaPromise<GetSimuladoQuestaoAggregateType<T>>

    /**
     * Group by SimuladoQuestao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimuladoQuestaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SimuladoQuestaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SimuladoQuestaoGroupByArgs['orderBy'] }
        : { orderBy?: SimuladoQuestaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SimuladoQuestaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSimuladoQuestaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SimuladoQuestao model
   */
  readonly fields: SimuladoQuestaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SimuladoQuestao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SimuladoQuestaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questao<T extends QuestaoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestaoDefaultArgs<ExtArgs>>): Prisma__QuestaoClient<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    simulado<T extends SimuladoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SimuladoDefaultArgs<ExtArgs>>): Prisma__SimuladoClient<$Result.GetResult<Prisma.$SimuladoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SimuladoQuestao model
   */ 
  interface SimuladoQuestaoFieldRefs {
    readonly id: FieldRef<"SimuladoQuestao", 'String'>
    readonly questaoId: FieldRef<"SimuladoQuestao", 'String'>
    readonly simuladoId: FieldRef<"SimuladoQuestao", 'String'>
    readonly posicao: FieldRef<"SimuladoQuestao", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SimuladoQuestao findUnique
   */
  export type SimuladoQuestaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimuladoQuestao
     */
    select?: SimuladoQuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SimuladoQuestao
     */
    omit?: SimuladoQuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoQuestaoInclude<ExtArgs> | null
    /**
     * Filter, which SimuladoQuestao to fetch.
     */
    where: SimuladoQuestaoWhereUniqueInput
  }

  /**
   * SimuladoQuestao findUniqueOrThrow
   */
  export type SimuladoQuestaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimuladoQuestao
     */
    select?: SimuladoQuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SimuladoQuestao
     */
    omit?: SimuladoQuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoQuestaoInclude<ExtArgs> | null
    /**
     * Filter, which SimuladoQuestao to fetch.
     */
    where: SimuladoQuestaoWhereUniqueInput
  }

  /**
   * SimuladoQuestao findFirst
   */
  export type SimuladoQuestaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimuladoQuestao
     */
    select?: SimuladoQuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SimuladoQuestao
     */
    omit?: SimuladoQuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoQuestaoInclude<ExtArgs> | null
    /**
     * Filter, which SimuladoQuestao to fetch.
     */
    where?: SimuladoQuestaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SimuladoQuestaos to fetch.
     */
    orderBy?: SimuladoQuestaoOrderByWithRelationInput | SimuladoQuestaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SimuladoQuestaos.
     */
    cursor?: SimuladoQuestaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SimuladoQuestaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SimuladoQuestaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SimuladoQuestaos.
     */
    distinct?: SimuladoQuestaoScalarFieldEnum | SimuladoQuestaoScalarFieldEnum[]
  }

  /**
   * SimuladoQuestao findFirstOrThrow
   */
  export type SimuladoQuestaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimuladoQuestao
     */
    select?: SimuladoQuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SimuladoQuestao
     */
    omit?: SimuladoQuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoQuestaoInclude<ExtArgs> | null
    /**
     * Filter, which SimuladoQuestao to fetch.
     */
    where?: SimuladoQuestaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SimuladoQuestaos to fetch.
     */
    orderBy?: SimuladoQuestaoOrderByWithRelationInput | SimuladoQuestaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SimuladoQuestaos.
     */
    cursor?: SimuladoQuestaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SimuladoQuestaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SimuladoQuestaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SimuladoQuestaos.
     */
    distinct?: SimuladoQuestaoScalarFieldEnum | SimuladoQuestaoScalarFieldEnum[]
  }

  /**
   * SimuladoQuestao findMany
   */
  export type SimuladoQuestaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimuladoQuestao
     */
    select?: SimuladoQuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SimuladoQuestao
     */
    omit?: SimuladoQuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoQuestaoInclude<ExtArgs> | null
    /**
     * Filter, which SimuladoQuestaos to fetch.
     */
    where?: SimuladoQuestaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SimuladoQuestaos to fetch.
     */
    orderBy?: SimuladoQuestaoOrderByWithRelationInput | SimuladoQuestaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SimuladoQuestaos.
     */
    cursor?: SimuladoQuestaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SimuladoQuestaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SimuladoQuestaos.
     */
    skip?: number
    distinct?: SimuladoQuestaoScalarFieldEnum | SimuladoQuestaoScalarFieldEnum[]
  }

  /**
   * SimuladoQuestao create
   */
  export type SimuladoQuestaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimuladoQuestao
     */
    select?: SimuladoQuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SimuladoQuestao
     */
    omit?: SimuladoQuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoQuestaoInclude<ExtArgs> | null
    /**
     * The data needed to create a SimuladoQuestao.
     */
    data: XOR<SimuladoQuestaoCreateInput, SimuladoQuestaoUncheckedCreateInput>
  }

  /**
   * SimuladoQuestao createMany
   */
  export type SimuladoQuestaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SimuladoQuestaos.
     */
    data: SimuladoQuestaoCreateManyInput | SimuladoQuestaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SimuladoQuestao createManyAndReturn
   */
  export type SimuladoQuestaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimuladoQuestao
     */
    select?: SimuladoQuestaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SimuladoQuestao
     */
    omit?: SimuladoQuestaoOmit<ExtArgs> | null
    /**
     * The data used to create many SimuladoQuestaos.
     */
    data: SimuladoQuestaoCreateManyInput | SimuladoQuestaoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoQuestaoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SimuladoQuestao update
   */
  export type SimuladoQuestaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimuladoQuestao
     */
    select?: SimuladoQuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SimuladoQuestao
     */
    omit?: SimuladoQuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoQuestaoInclude<ExtArgs> | null
    /**
     * The data needed to update a SimuladoQuestao.
     */
    data: XOR<SimuladoQuestaoUpdateInput, SimuladoQuestaoUncheckedUpdateInput>
    /**
     * Choose, which SimuladoQuestao to update.
     */
    where: SimuladoQuestaoWhereUniqueInput
  }

  /**
   * SimuladoQuestao updateMany
   */
  export type SimuladoQuestaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SimuladoQuestaos.
     */
    data: XOR<SimuladoQuestaoUpdateManyMutationInput, SimuladoQuestaoUncheckedUpdateManyInput>
    /**
     * Filter which SimuladoQuestaos to update
     */
    where?: SimuladoQuestaoWhereInput
    /**
     * Limit how many SimuladoQuestaos to update.
     */
    limit?: number
  }

  /**
   * SimuladoQuestao updateManyAndReturn
   */
  export type SimuladoQuestaoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimuladoQuestao
     */
    select?: SimuladoQuestaoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SimuladoQuestao
     */
    omit?: SimuladoQuestaoOmit<ExtArgs> | null
    /**
     * The data used to update SimuladoQuestaos.
     */
    data: XOR<SimuladoQuestaoUpdateManyMutationInput, SimuladoQuestaoUncheckedUpdateManyInput>
    /**
     * Filter which SimuladoQuestaos to update
     */
    where?: SimuladoQuestaoWhereInput
    /**
     * Limit how many SimuladoQuestaos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoQuestaoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SimuladoQuestao upsert
   */
  export type SimuladoQuestaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimuladoQuestao
     */
    select?: SimuladoQuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SimuladoQuestao
     */
    omit?: SimuladoQuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoQuestaoInclude<ExtArgs> | null
    /**
     * The filter to search for the SimuladoQuestao to update in case it exists.
     */
    where: SimuladoQuestaoWhereUniqueInput
    /**
     * In case the SimuladoQuestao found by the `where` argument doesn't exist, create a new SimuladoQuestao with this data.
     */
    create: XOR<SimuladoQuestaoCreateInput, SimuladoQuestaoUncheckedCreateInput>
    /**
     * In case the SimuladoQuestao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SimuladoQuestaoUpdateInput, SimuladoQuestaoUncheckedUpdateInput>
  }

  /**
   * SimuladoQuestao delete
   */
  export type SimuladoQuestaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimuladoQuestao
     */
    select?: SimuladoQuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SimuladoQuestao
     */
    omit?: SimuladoQuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoQuestaoInclude<ExtArgs> | null
    /**
     * Filter which SimuladoQuestao to delete.
     */
    where: SimuladoQuestaoWhereUniqueInput
  }

  /**
   * SimuladoQuestao deleteMany
   */
  export type SimuladoQuestaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SimuladoQuestaos to delete
     */
    where?: SimuladoQuestaoWhereInput
    /**
     * Limit how many SimuladoQuestaos to delete.
     */
    limit?: number
  }

  /**
   * SimuladoQuestao without action
   */
  export type SimuladoQuestaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimuladoQuestao
     */
    select?: SimuladoQuestaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SimuladoQuestao
     */
    omit?: SimuladoQuestaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimuladoQuestaoInclude<ExtArgs> | null
  }


  /**
   * Model Redacao
   */

  export type AggregateRedacao = {
    _count: RedacaoCountAggregateOutputType | null
    _min: RedacaoMinAggregateOutputType | null
    _max: RedacaoMaxAggregateOutputType | null
  }

  export type RedacaoMinAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    tema: string | null
    textosAuxiliares: string | null
    conteudo: string | null
    correcao: string | null
    status: string | null
    criadoEm: Date | null
  }

  export type RedacaoMaxAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    tema: string | null
    textosAuxiliares: string | null
    conteudo: string | null
    correcao: string | null
    status: string | null
    criadoEm: Date | null
  }

  export type RedacaoCountAggregateOutputType = {
    id: number
    usuarioId: number
    tema: number
    textosAuxiliares: number
    conteudo: number
    correcao: number
    status: number
    criadoEm: number
    _all: number
  }


  export type RedacaoMinAggregateInputType = {
    id?: true
    usuarioId?: true
    tema?: true
    textosAuxiliares?: true
    conteudo?: true
    correcao?: true
    status?: true
    criadoEm?: true
  }

  export type RedacaoMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    tema?: true
    textosAuxiliares?: true
    conteudo?: true
    correcao?: true
    status?: true
    criadoEm?: true
  }

  export type RedacaoCountAggregateInputType = {
    id?: true
    usuarioId?: true
    tema?: true
    textosAuxiliares?: true
    conteudo?: true
    correcao?: true
    status?: true
    criadoEm?: true
    _all?: true
  }

  export type RedacaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Redacao to aggregate.
     */
    where?: RedacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Redacaos to fetch.
     */
    orderBy?: RedacaoOrderByWithRelationInput | RedacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RedacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Redacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Redacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Redacaos
    **/
    _count?: true | RedacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RedacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RedacaoMaxAggregateInputType
  }

  export type GetRedacaoAggregateType<T extends RedacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateRedacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRedacao[P]>
      : GetScalarType<T[P], AggregateRedacao[P]>
  }




  export type RedacaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RedacaoWhereInput
    orderBy?: RedacaoOrderByWithAggregationInput | RedacaoOrderByWithAggregationInput[]
    by: RedacaoScalarFieldEnum[] | RedacaoScalarFieldEnum
    having?: RedacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RedacaoCountAggregateInputType | true
    _min?: RedacaoMinAggregateInputType
    _max?: RedacaoMaxAggregateInputType
  }

  export type RedacaoGroupByOutputType = {
    id: string
    usuarioId: string
    tema: string | null
    textosAuxiliares: string | null
    conteudo: string
    correcao: string
    status: string
    criadoEm: Date
    _count: RedacaoCountAggregateOutputType | null
    _min: RedacaoMinAggregateOutputType | null
    _max: RedacaoMaxAggregateOutputType | null
  }

  type GetRedacaoGroupByPayload<T extends RedacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RedacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RedacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RedacaoGroupByOutputType[P]>
            : GetScalarType<T[P], RedacaoGroupByOutputType[P]>
        }
      >
    >


  export type RedacaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tema?: boolean
    textosAuxiliares?: boolean
    conteudo?: boolean
    correcao?: boolean
    status?: boolean
    criadoEm?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["redacao"]>

  export type RedacaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tema?: boolean
    textosAuxiliares?: boolean
    conteudo?: boolean
    correcao?: boolean
    status?: boolean
    criadoEm?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["redacao"]>

  export type RedacaoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tema?: boolean
    textosAuxiliares?: boolean
    conteudo?: boolean
    correcao?: boolean
    status?: boolean
    criadoEm?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["redacao"]>

  export type RedacaoSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    tema?: boolean
    textosAuxiliares?: boolean
    conteudo?: boolean
    correcao?: boolean
    status?: boolean
    criadoEm?: boolean
  }

  export type RedacaoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "usuarioId" | "tema" | "textosAuxiliares" | "conteudo" | "correcao" | "status" | "criadoEm", ExtArgs["result"]["redacao"]>
  export type RedacaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type RedacaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type RedacaoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $RedacaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Redacao"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usuarioId: string
      tema: string | null
      textosAuxiliares: string | null
      conteudo: string
      correcao: string
      status: string
      criadoEm: Date
    }, ExtArgs["result"]["redacao"]>
    composites: {}
  }

  type RedacaoGetPayload<S extends boolean | null | undefined | RedacaoDefaultArgs> = $Result.GetResult<Prisma.$RedacaoPayload, S>

  type RedacaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RedacaoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RedacaoCountAggregateInputType | true
    }

  export interface RedacaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Redacao'], meta: { name: 'Redacao' } }
    /**
     * Find zero or one Redacao that matches the filter.
     * @param {RedacaoFindUniqueArgs} args - Arguments to find a Redacao
     * @example
     * // Get one Redacao
     * const redacao = await prisma.redacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RedacaoFindUniqueArgs>(args: SelectSubset<T, RedacaoFindUniqueArgs<ExtArgs>>): Prisma__RedacaoClient<$Result.GetResult<Prisma.$RedacaoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Redacao that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RedacaoFindUniqueOrThrowArgs} args - Arguments to find a Redacao
     * @example
     * // Get one Redacao
     * const redacao = await prisma.redacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RedacaoFindUniqueOrThrowArgs>(args: SelectSubset<T, RedacaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RedacaoClient<$Result.GetResult<Prisma.$RedacaoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Redacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedacaoFindFirstArgs} args - Arguments to find a Redacao
     * @example
     * // Get one Redacao
     * const redacao = await prisma.redacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RedacaoFindFirstArgs>(args?: SelectSubset<T, RedacaoFindFirstArgs<ExtArgs>>): Prisma__RedacaoClient<$Result.GetResult<Prisma.$RedacaoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Redacao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedacaoFindFirstOrThrowArgs} args - Arguments to find a Redacao
     * @example
     * // Get one Redacao
     * const redacao = await prisma.redacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RedacaoFindFirstOrThrowArgs>(args?: SelectSubset<T, RedacaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__RedacaoClient<$Result.GetResult<Prisma.$RedacaoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Redacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedacaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Redacaos
     * const redacaos = await prisma.redacao.findMany()
     * 
     * // Get first 10 Redacaos
     * const redacaos = await prisma.redacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const redacaoWithIdOnly = await prisma.redacao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RedacaoFindManyArgs>(args?: SelectSubset<T, RedacaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RedacaoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Redacao.
     * @param {RedacaoCreateArgs} args - Arguments to create a Redacao.
     * @example
     * // Create one Redacao
     * const Redacao = await prisma.redacao.create({
     *   data: {
     *     // ... data to create a Redacao
     *   }
     * })
     * 
     */
    create<T extends RedacaoCreateArgs>(args: SelectSubset<T, RedacaoCreateArgs<ExtArgs>>): Prisma__RedacaoClient<$Result.GetResult<Prisma.$RedacaoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Redacaos.
     * @param {RedacaoCreateManyArgs} args - Arguments to create many Redacaos.
     * @example
     * // Create many Redacaos
     * const redacao = await prisma.redacao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RedacaoCreateManyArgs>(args?: SelectSubset<T, RedacaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Redacaos and returns the data saved in the database.
     * @param {RedacaoCreateManyAndReturnArgs} args - Arguments to create many Redacaos.
     * @example
     * // Create many Redacaos
     * const redacao = await prisma.redacao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Redacaos and only return the `id`
     * const redacaoWithIdOnly = await prisma.redacao.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RedacaoCreateManyAndReturnArgs>(args?: SelectSubset<T, RedacaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RedacaoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Redacao.
     * @param {RedacaoDeleteArgs} args - Arguments to delete one Redacao.
     * @example
     * // Delete one Redacao
     * const Redacao = await prisma.redacao.delete({
     *   where: {
     *     // ... filter to delete one Redacao
     *   }
     * })
     * 
     */
    delete<T extends RedacaoDeleteArgs>(args: SelectSubset<T, RedacaoDeleteArgs<ExtArgs>>): Prisma__RedacaoClient<$Result.GetResult<Prisma.$RedacaoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Redacao.
     * @param {RedacaoUpdateArgs} args - Arguments to update one Redacao.
     * @example
     * // Update one Redacao
     * const redacao = await prisma.redacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RedacaoUpdateArgs>(args: SelectSubset<T, RedacaoUpdateArgs<ExtArgs>>): Prisma__RedacaoClient<$Result.GetResult<Prisma.$RedacaoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Redacaos.
     * @param {RedacaoDeleteManyArgs} args - Arguments to filter Redacaos to delete.
     * @example
     * // Delete a few Redacaos
     * const { count } = await prisma.redacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RedacaoDeleteManyArgs>(args?: SelectSubset<T, RedacaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Redacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Redacaos
     * const redacao = await prisma.redacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RedacaoUpdateManyArgs>(args: SelectSubset<T, RedacaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Redacaos and returns the data updated in the database.
     * @param {RedacaoUpdateManyAndReturnArgs} args - Arguments to update many Redacaos.
     * @example
     * // Update many Redacaos
     * const redacao = await prisma.redacao.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Redacaos and only return the `id`
     * const redacaoWithIdOnly = await prisma.redacao.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RedacaoUpdateManyAndReturnArgs>(args: SelectSubset<T, RedacaoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RedacaoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Redacao.
     * @param {RedacaoUpsertArgs} args - Arguments to update or create a Redacao.
     * @example
     * // Update or create a Redacao
     * const redacao = await prisma.redacao.upsert({
     *   create: {
     *     // ... data to create a Redacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Redacao we want to update
     *   }
     * })
     */
    upsert<T extends RedacaoUpsertArgs>(args: SelectSubset<T, RedacaoUpsertArgs<ExtArgs>>): Prisma__RedacaoClient<$Result.GetResult<Prisma.$RedacaoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Redacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedacaoCountArgs} args - Arguments to filter Redacaos to count.
     * @example
     * // Count the number of Redacaos
     * const count = await prisma.redacao.count({
     *   where: {
     *     // ... the filter for the Redacaos we want to count
     *   }
     * })
    **/
    count<T extends RedacaoCountArgs>(
      args?: Subset<T, RedacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RedacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Redacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RedacaoAggregateArgs>(args: Subset<T, RedacaoAggregateArgs>): Prisma.PrismaPromise<GetRedacaoAggregateType<T>>

    /**
     * Group by Redacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RedacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RedacaoGroupByArgs['orderBy'] }
        : { orderBy?: RedacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RedacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRedacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Redacao model
   */
  readonly fields: RedacaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Redacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RedacaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Redacao model
   */ 
  interface RedacaoFieldRefs {
    readonly id: FieldRef<"Redacao", 'String'>
    readonly usuarioId: FieldRef<"Redacao", 'String'>
    readonly tema: FieldRef<"Redacao", 'String'>
    readonly textosAuxiliares: FieldRef<"Redacao", 'String'>
    readonly conteudo: FieldRef<"Redacao", 'String'>
    readonly correcao: FieldRef<"Redacao", 'String'>
    readonly status: FieldRef<"Redacao", 'String'>
    readonly criadoEm: FieldRef<"Redacao", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Redacao findUnique
   */
  export type RedacaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Redacao
     */
    select?: RedacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Redacao
     */
    omit?: RedacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedacaoInclude<ExtArgs> | null
    /**
     * Filter, which Redacao to fetch.
     */
    where: RedacaoWhereUniqueInput
  }

  /**
   * Redacao findUniqueOrThrow
   */
  export type RedacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Redacao
     */
    select?: RedacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Redacao
     */
    omit?: RedacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedacaoInclude<ExtArgs> | null
    /**
     * Filter, which Redacao to fetch.
     */
    where: RedacaoWhereUniqueInput
  }

  /**
   * Redacao findFirst
   */
  export type RedacaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Redacao
     */
    select?: RedacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Redacao
     */
    omit?: RedacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedacaoInclude<ExtArgs> | null
    /**
     * Filter, which Redacao to fetch.
     */
    where?: RedacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Redacaos to fetch.
     */
    orderBy?: RedacaoOrderByWithRelationInput | RedacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Redacaos.
     */
    cursor?: RedacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Redacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Redacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Redacaos.
     */
    distinct?: RedacaoScalarFieldEnum | RedacaoScalarFieldEnum[]
  }

  /**
   * Redacao findFirstOrThrow
   */
  export type RedacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Redacao
     */
    select?: RedacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Redacao
     */
    omit?: RedacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedacaoInclude<ExtArgs> | null
    /**
     * Filter, which Redacao to fetch.
     */
    where?: RedacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Redacaos to fetch.
     */
    orderBy?: RedacaoOrderByWithRelationInput | RedacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Redacaos.
     */
    cursor?: RedacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Redacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Redacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Redacaos.
     */
    distinct?: RedacaoScalarFieldEnum | RedacaoScalarFieldEnum[]
  }

  /**
   * Redacao findMany
   */
  export type RedacaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Redacao
     */
    select?: RedacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Redacao
     */
    omit?: RedacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedacaoInclude<ExtArgs> | null
    /**
     * Filter, which Redacaos to fetch.
     */
    where?: RedacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Redacaos to fetch.
     */
    orderBy?: RedacaoOrderByWithRelationInput | RedacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Redacaos.
     */
    cursor?: RedacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Redacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Redacaos.
     */
    skip?: number
    distinct?: RedacaoScalarFieldEnum | RedacaoScalarFieldEnum[]
  }

  /**
   * Redacao create
   */
  export type RedacaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Redacao
     */
    select?: RedacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Redacao
     */
    omit?: RedacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Redacao.
     */
    data: XOR<RedacaoCreateInput, RedacaoUncheckedCreateInput>
  }

  /**
   * Redacao createMany
   */
  export type RedacaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Redacaos.
     */
    data: RedacaoCreateManyInput | RedacaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Redacao createManyAndReturn
   */
  export type RedacaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Redacao
     */
    select?: RedacaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Redacao
     */
    omit?: RedacaoOmit<ExtArgs> | null
    /**
     * The data used to create many Redacaos.
     */
    data: RedacaoCreateManyInput | RedacaoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedacaoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Redacao update
   */
  export type RedacaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Redacao
     */
    select?: RedacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Redacao
     */
    omit?: RedacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Redacao.
     */
    data: XOR<RedacaoUpdateInput, RedacaoUncheckedUpdateInput>
    /**
     * Choose, which Redacao to update.
     */
    where: RedacaoWhereUniqueInput
  }

  /**
   * Redacao updateMany
   */
  export type RedacaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Redacaos.
     */
    data: XOR<RedacaoUpdateManyMutationInput, RedacaoUncheckedUpdateManyInput>
    /**
     * Filter which Redacaos to update
     */
    where?: RedacaoWhereInput
    /**
     * Limit how many Redacaos to update.
     */
    limit?: number
  }

  /**
   * Redacao updateManyAndReturn
   */
  export type RedacaoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Redacao
     */
    select?: RedacaoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Redacao
     */
    omit?: RedacaoOmit<ExtArgs> | null
    /**
     * The data used to update Redacaos.
     */
    data: XOR<RedacaoUpdateManyMutationInput, RedacaoUncheckedUpdateManyInput>
    /**
     * Filter which Redacaos to update
     */
    where?: RedacaoWhereInput
    /**
     * Limit how many Redacaos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedacaoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Redacao upsert
   */
  export type RedacaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Redacao
     */
    select?: RedacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Redacao
     */
    omit?: RedacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Redacao to update in case it exists.
     */
    where: RedacaoWhereUniqueInput
    /**
     * In case the Redacao found by the `where` argument doesn't exist, create a new Redacao with this data.
     */
    create: XOR<RedacaoCreateInput, RedacaoUncheckedCreateInput>
    /**
     * In case the Redacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RedacaoUpdateInput, RedacaoUncheckedUpdateInput>
  }

  /**
   * Redacao delete
   */
  export type RedacaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Redacao
     */
    select?: RedacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Redacao
     */
    omit?: RedacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedacaoInclude<ExtArgs> | null
    /**
     * Filter which Redacao to delete.
     */
    where: RedacaoWhereUniqueInput
  }

  /**
   * Redacao deleteMany
   */
  export type RedacaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Redacaos to delete
     */
    where?: RedacaoWhereInput
    /**
     * Limit how many Redacaos to delete.
     */
    limit?: number
  }

  /**
   * Redacao without action
   */
  export type RedacaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Redacao
     */
    select?: RedacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Redacao
     */
    omit?: RedacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedacaoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    email: 'email',
    senha: 'senha',
    nome: 'nome',
    criadoEm: 'criadoEm'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const QuestaoScalarFieldEnum: {
    id: 'id',
    ano: 'ano',
    curso: 'curso',
    materia: 'materia',
    categoria: 'categoria',
    enunciado: 'enunciado',
    alternativaA: 'alternativaA',
    alternativaB: 'alternativaB',
    alternativaC: 'alternativaC',
    alternativaD: 'alternativaD',
    alternativaE: 'alternativaE',
    respostaCorreta: 'respostaCorreta',
    peso: 'peso'
  };

  export type QuestaoScalarFieldEnum = (typeof QuestaoScalarFieldEnum)[keyof typeof QuestaoScalarFieldEnum]


  export const SimuladoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    curso: 'curso',
    criadoEm: 'criadoEm'
  };

  export type SimuladoScalarFieldEnum = (typeof SimuladoScalarFieldEnum)[keyof typeof SimuladoScalarFieldEnum]


  export const SimuladoQuestaoScalarFieldEnum: {
    id: 'id',
    questaoId: 'questaoId',
    simuladoId: 'simuladoId',
    posicao: 'posicao'
  };

  export type SimuladoQuestaoScalarFieldEnum = (typeof SimuladoQuestaoScalarFieldEnum)[keyof typeof SimuladoQuestaoScalarFieldEnum]


  export const RedacaoScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    tema: 'tema',
    textosAuxiliares: 'textosAuxiliares',
    conteudo: 'conteudo',
    correcao: 'correcao',
    status: 'status',
    criadoEm: 'criadoEm'
  };

  export type RedacaoScalarFieldEnum = (typeof RedacaoScalarFieldEnum)[keyof typeof RedacaoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    nome?: StringFilter<"Usuario"> | string
    criadoEm?: DateTimeFilter<"Usuario"> | Date | string
    redacoes?: RedacaoListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nome?: SortOrder
    criadoEm?: SortOrder
    redacoes?: RedacaoOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    senha?: StringFilter<"Usuario"> | string
    nome?: StringFilter<"Usuario"> | string
    criadoEm?: DateTimeFilter<"Usuario"> | Date | string
    redacoes?: RedacaoListRelationFilter
  }, "id" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nome?: SortOrder
    criadoEm?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Usuario"> | string
    email?: StringWithAggregatesFilter<"Usuario"> | string
    senha?: StringWithAggregatesFilter<"Usuario"> | string
    nome?: StringWithAggregatesFilter<"Usuario"> | string
    criadoEm?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
  }

  export type QuestaoWhereInput = {
    AND?: QuestaoWhereInput | QuestaoWhereInput[]
    OR?: QuestaoWhereInput[]
    NOT?: QuestaoWhereInput | QuestaoWhereInput[]
    id?: StringFilter<"Questao"> | string
    ano?: IntFilter<"Questao"> | number
    curso?: StringFilter<"Questao"> | string
    materia?: StringFilter<"Questao"> | string
    categoria?: StringFilter<"Questao"> | string
    enunciado?: StringFilter<"Questao"> | string
    alternativaA?: StringFilter<"Questao"> | string
    alternativaB?: StringFilter<"Questao"> | string
    alternativaC?: StringFilter<"Questao"> | string
    alternativaD?: StringFilter<"Questao"> | string
    alternativaE?: StringFilter<"Questao"> | string
    respostaCorreta?: StringFilter<"Questao"> | string
    peso?: IntFilter<"Questao"> | number
    simulados?: SimuladoQuestaoListRelationFilter
  }

  export type QuestaoOrderByWithRelationInput = {
    id?: SortOrder
    ano?: SortOrder
    curso?: SortOrder
    materia?: SortOrder
    categoria?: SortOrder
    enunciado?: SortOrder
    alternativaA?: SortOrder
    alternativaB?: SortOrder
    alternativaC?: SortOrder
    alternativaD?: SortOrder
    alternativaE?: SortOrder
    respostaCorreta?: SortOrder
    peso?: SortOrder
    simulados?: SimuladoQuestaoOrderByRelationAggregateInput
  }

  export type QuestaoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestaoWhereInput | QuestaoWhereInput[]
    OR?: QuestaoWhereInput[]
    NOT?: QuestaoWhereInput | QuestaoWhereInput[]
    ano?: IntFilter<"Questao"> | number
    curso?: StringFilter<"Questao"> | string
    materia?: StringFilter<"Questao"> | string
    categoria?: StringFilter<"Questao"> | string
    enunciado?: StringFilter<"Questao"> | string
    alternativaA?: StringFilter<"Questao"> | string
    alternativaB?: StringFilter<"Questao"> | string
    alternativaC?: StringFilter<"Questao"> | string
    alternativaD?: StringFilter<"Questao"> | string
    alternativaE?: StringFilter<"Questao"> | string
    respostaCorreta?: StringFilter<"Questao"> | string
    peso?: IntFilter<"Questao"> | number
    simulados?: SimuladoQuestaoListRelationFilter
  }, "id">

  export type QuestaoOrderByWithAggregationInput = {
    id?: SortOrder
    ano?: SortOrder
    curso?: SortOrder
    materia?: SortOrder
    categoria?: SortOrder
    enunciado?: SortOrder
    alternativaA?: SortOrder
    alternativaB?: SortOrder
    alternativaC?: SortOrder
    alternativaD?: SortOrder
    alternativaE?: SortOrder
    respostaCorreta?: SortOrder
    peso?: SortOrder
    _count?: QuestaoCountOrderByAggregateInput
    _avg?: QuestaoAvgOrderByAggregateInput
    _max?: QuestaoMaxOrderByAggregateInput
    _min?: QuestaoMinOrderByAggregateInput
    _sum?: QuestaoSumOrderByAggregateInput
  }

  export type QuestaoScalarWhereWithAggregatesInput = {
    AND?: QuestaoScalarWhereWithAggregatesInput | QuestaoScalarWhereWithAggregatesInput[]
    OR?: QuestaoScalarWhereWithAggregatesInput[]
    NOT?: QuestaoScalarWhereWithAggregatesInput | QuestaoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Questao"> | string
    ano?: IntWithAggregatesFilter<"Questao"> | number
    curso?: StringWithAggregatesFilter<"Questao"> | string
    materia?: StringWithAggregatesFilter<"Questao"> | string
    categoria?: StringWithAggregatesFilter<"Questao"> | string
    enunciado?: StringWithAggregatesFilter<"Questao"> | string
    alternativaA?: StringWithAggregatesFilter<"Questao"> | string
    alternativaB?: StringWithAggregatesFilter<"Questao"> | string
    alternativaC?: StringWithAggregatesFilter<"Questao"> | string
    alternativaD?: StringWithAggregatesFilter<"Questao"> | string
    alternativaE?: StringWithAggregatesFilter<"Questao"> | string
    respostaCorreta?: StringWithAggregatesFilter<"Questao"> | string
    peso?: IntWithAggregatesFilter<"Questao"> | number
  }

  export type SimuladoWhereInput = {
    AND?: SimuladoWhereInput | SimuladoWhereInput[]
    OR?: SimuladoWhereInput[]
    NOT?: SimuladoWhereInput | SimuladoWhereInput[]
    id?: StringFilter<"Simulado"> | string
    nome?: StringFilter<"Simulado"> | string
    curso?: StringFilter<"Simulado"> | string
    criadoEm?: DateTimeFilter<"Simulado"> | Date | string
    questoes?: SimuladoQuestaoListRelationFilter
  }

  export type SimuladoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    curso?: SortOrder
    criadoEm?: SortOrder
    questoes?: SimuladoQuestaoOrderByRelationAggregateInput
  }

  export type SimuladoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SimuladoWhereInput | SimuladoWhereInput[]
    OR?: SimuladoWhereInput[]
    NOT?: SimuladoWhereInput | SimuladoWhereInput[]
    nome?: StringFilter<"Simulado"> | string
    curso?: StringFilter<"Simulado"> | string
    criadoEm?: DateTimeFilter<"Simulado"> | Date | string
    questoes?: SimuladoQuestaoListRelationFilter
  }, "id">

  export type SimuladoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    curso?: SortOrder
    criadoEm?: SortOrder
    _count?: SimuladoCountOrderByAggregateInput
    _max?: SimuladoMaxOrderByAggregateInput
    _min?: SimuladoMinOrderByAggregateInput
  }

  export type SimuladoScalarWhereWithAggregatesInput = {
    AND?: SimuladoScalarWhereWithAggregatesInput | SimuladoScalarWhereWithAggregatesInput[]
    OR?: SimuladoScalarWhereWithAggregatesInput[]
    NOT?: SimuladoScalarWhereWithAggregatesInput | SimuladoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Simulado"> | string
    nome?: StringWithAggregatesFilter<"Simulado"> | string
    curso?: StringWithAggregatesFilter<"Simulado"> | string
    criadoEm?: DateTimeWithAggregatesFilter<"Simulado"> | Date | string
  }

  export type SimuladoQuestaoWhereInput = {
    AND?: SimuladoQuestaoWhereInput | SimuladoQuestaoWhereInput[]
    OR?: SimuladoQuestaoWhereInput[]
    NOT?: SimuladoQuestaoWhereInput | SimuladoQuestaoWhereInput[]
    id?: StringFilter<"SimuladoQuestao"> | string
    questaoId?: StringFilter<"SimuladoQuestao"> | string
    simuladoId?: StringFilter<"SimuladoQuestao"> | string
    posicao?: IntFilter<"SimuladoQuestao"> | number
    questao?: XOR<QuestaoScalarRelationFilter, QuestaoWhereInput>
    simulado?: XOR<SimuladoScalarRelationFilter, SimuladoWhereInput>
  }

  export type SimuladoQuestaoOrderByWithRelationInput = {
    id?: SortOrder
    questaoId?: SortOrder
    simuladoId?: SortOrder
    posicao?: SortOrder
    questao?: QuestaoOrderByWithRelationInput
    simulado?: SimuladoOrderByWithRelationInput
  }

  export type SimuladoQuestaoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    simuladoId_posicao?: SimuladoQuestaoSimuladoIdPosicaoCompoundUniqueInput
    AND?: SimuladoQuestaoWhereInput | SimuladoQuestaoWhereInput[]
    OR?: SimuladoQuestaoWhereInput[]
    NOT?: SimuladoQuestaoWhereInput | SimuladoQuestaoWhereInput[]
    questaoId?: StringFilter<"SimuladoQuestao"> | string
    simuladoId?: StringFilter<"SimuladoQuestao"> | string
    posicao?: IntFilter<"SimuladoQuestao"> | number
    questao?: XOR<QuestaoScalarRelationFilter, QuestaoWhereInput>
    simulado?: XOR<SimuladoScalarRelationFilter, SimuladoWhereInput>
  }, "id" | "simuladoId_posicao">

  export type SimuladoQuestaoOrderByWithAggregationInput = {
    id?: SortOrder
    questaoId?: SortOrder
    simuladoId?: SortOrder
    posicao?: SortOrder
    _count?: SimuladoQuestaoCountOrderByAggregateInput
    _avg?: SimuladoQuestaoAvgOrderByAggregateInput
    _max?: SimuladoQuestaoMaxOrderByAggregateInput
    _min?: SimuladoQuestaoMinOrderByAggregateInput
    _sum?: SimuladoQuestaoSumOrderByAggregateInput
  }

  export type SimuladoQuestaoScalarWhereWithAggregatesInput = {
    AND?: SimuladoQuestaoScalarWhereWithAggregatesInput | SimuladoQuestaoScalarWhereWithAggregatesInput[]
    OR?: SimuladoQuestaoScalarWhereWithAggregatesInput[]
    NOT?: SimuladoQuestaoScalarWhereWithAggregatesInput | SimuladoQuestaoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SimuladoQuestao"> | string
    questaoId?: StringWithAggregatesFilter<"SimuladoQuestao"> | string
    simuladoId?: StringWithAggregatesFilter<"SimuladoQuestao"> | string
    posicao?: IntWithAggregatesFilter<"SimuladoQuestao"> | number
  }

  export type RedacaoWhereInput = {
    AND?: RedacaoWhereInput | RedacaoWhereInput[]
    OR?: RedacaoWhereInput[]
    NOT?: RedacaoWhereInput | RedacaoWhereInput[]
    id?: StringFilter<"Redacao"> | string
    usuarioId?: StringFilter<"Redacao"> | string
    tema?: StringNullableFilter<"Redacao"> | string | null
    textosAuxiliares?: StringNullableFilter<"Redacao"> | string | null
    conteudo?: StringFilter<"Redacao"> | string
    correcao?: StringFilter<"Redacao"> | string
    status?: StringFilter<"Redacao"> | string
    criadoEm?: DateTimeFilter<"Redacao"> | Date | string
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }

  export type RedacaoOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tema?: SortOrderInput | SortOrder
    textosAuxiliares?: SortOrderInput | SortOrder
    conteudo?: SortOrder
    correcao?: SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type RedacaoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RedacaoWhereInput | RedacaoWhereInput[]
    OR?: RedacaoWhereInput[]
    NOT?: RedacaoWhereInput | RedacaoWhereInput[]
    usuarioId?: StringFilter<"Redacao"> | string
    tema?: StringNullableFilter<"Redacao"> | string | null
    textosAuxiliares?: StringNullableFilter<"Redacao"> | string | null
    conteudo?: StringFilter<"Redacao"> | string
    correcao?: StringFilter<"Redacao"> | string
    status?: StringFilter<"Redacao"> | string
    criadoEm?: DateTimeFilter<"Redacao"> | Date | string
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }, "id">

  export type RedacaoOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tema?: SortOrderInput | SortOrder
    textosAuxiliares?: SortOrderInput | SortOrder
    conteudo?: SortOrder
    correcao?: SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
    _count?: RedacaoCountOrderByAggregateInput
    _max?: RedacaoMaxOrderByAggregateInput
    _min?: RedacaoMinOrderByAggregateInput
  }

  export type RedacaoScalarWhereWithAggregatesInput = {
    AND?: RedacaoScalarWhereWithAggregatesInput | RedacaoScalarWhereWithAggregatesInput[]
    OR?: RedacaoScalarWhereWithAggregatesInput[]
    NOT?: RedacaoScalarWhereWithAggregatesInput | RedacaoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Redacao"> | string
    usuarioId?: StringWithAggregatesFilter<"Redacao"> | string
    tema?: StringNullableWithAggregatesFilter<"Redacao"> | string | null
    textosAuxiliares?: StringNullableWithAggregatesFilter<"Redacao"> | string | null
    conteudo?: StringWithAggregatesFilter<"Redacao"> | string
    correcao?: StringWithAggregatesFilter<"Redacao"> | string
    status?: StringWithAggregatesFilter<"Redacao"> | string
    criadoEm?: DateTimeWithAggregatesFilter<"Redacao"> | Date | string
  }

  export type UsuarioCreateInput = {
    id?: string
    email: string
    senha: string
    nome: string
    criadoEm?: Date | string
    redacoes?: RedacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: string
    email: string
    senha: string
    nome: string
    criadoEm?: Date | string
    redacoes?: RedacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    redacoes?: RedacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    redacoes?: RedacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: string
    email: string
    senha: string
    nome: string
    criadoEm?: Date | string
  }

  export type UsuarioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestaoCreateInput = {
    id?: string
    ano: number
    curso: string
    materia: string
    categoria: string
    enunciado: string
    alternativaA: string
    alternativaB: string
    alternativaC: string
    alternativaD: string
    alternativaE: string
    respostaCorreta: string
    peso: number
    simulados?: SimuladoQuestaoCreateNestedManyWithoutQuestaoInput
  }

  export type QuestaoUncheckedCreateInput = {
    id?: string
    ano: number
    curso: string
    materia: string
    categoria: string
    enunciado: string
    alternativaA: string
    alternativaB: string
    alternativaC: string
    alternativaD: string
    alternativaE: string
    respostaCorreta: string
    peso: number
    simulados?: SimuladoQuestaoUncheckedCreateNestedManyWithoutQuestaoInput
  }

  export type QuestaoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    curso?: StringFieldUpdateOperationsInput | string
    materia?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    enunciado?: StringFieldUpdateOperationsInput | string
    alternativaA?: StringFieldUpdateOperationsInput | string
    alternativaB?: StringFieldUpdateOperationsInput | string
    alternativaC?: StringFieldUpdateOperationsInput | string
    alternativaD?: StringFieldUpdateOperationsInput | string
    alternativaE?: StringFieldUpdateOperationsInput | string
    respostaCorreta?: StringFieldUpdateOperationsInput | string
    peso?: IntFieldUpdateOperationsInput | number
    simulados?: SimuladoQuestaoUpdateManyWithoutQuestaoNestedInput
  }

  export type QuestaoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    curso?: StringFieldUpdateOperationsInput | string
    materia?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    enunciado?: StringFieldUpdateOperationsInput | string
    alternativaA?: StringFieldUpdateOperationsInput | string
    alternativaB?: StringFieldUpdateOperationsInput | string
    alternativaC?: StringFieldUpdateOperationsInput | string
    alternativaD?: StringFieldUpdateOperationsInput | string
    alternativaE?: StringFieldUpdateOperationsInput | string
    respostaCorreta?: StringFieldUpdateOperationsInput | string
    peso?: IntFieldUpdateOperationsInput | number
    simulados?: SimuladoQuestaoUncheckedUpdateManyWithoutQuestaoNestedInput
  }

  export type QuestaoCreateManyInput = {
    id?: string
    ano: number
    curso: string
    materia: string
    categoria: string
    enunciado: string
    alternativaA: string
    alternativaB: string
    alternativaC: string
    alternativaD: string
    alternativaE: string
    respostaCorreta: string
    peso: number
  }

  export type QuestaoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    curso?: StringFieldUpdateOperationsInput | string
    materia?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    enunciado?: StringFieldUpdateOperationsInput | string
    alternativaA?: StringFieldUpdateOperationsInput | string
    alternativaB?: StringFieldUpdateOperationsInput | string
    alternativaC?: StringFieldUpdateOperationsInput | string
    alternativaD?: StringFieldUpdateOperationsInput | string
    alternativaE?: StringFieldUpdateOperationsInput | string
    respostaCorreta?: StringFieldUpdateOperationsInput | string
    peso?: IntFieldUpdateOperationsInput | number
  }

  export type QuestaoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    curso?: StringFieldUpdateOperationsInput | string
    materia?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    enunciado?: StringFieldUpdateOperationsInput | string
    alternativaA?: StringFieldUpdateOperationsInput | string
    alternativaB?: StringFieldUpdateOperationsInput | string
    alternativaC?: StringFieldUpdateOperationsInput | string
    alternativaD?: StringFieldUpdateOperationsInput | string
    alternativaE?: StringFieldUpdateOperationsInput | string
    respostaCorreta?: StringFieldUpdateOperationsInput | string
    peso?: IntFieldUpdateOperationsInput | number
  }

  export type SimuladoCreateInput = {
    id?: string
    nome: string
    curso: string
    criadoEm?: Date | string
    questoes?: SimuladoQuestaoCreateNestedManyWithoutSimuladoInput
  }

  export type SimuladoUncheckedCreateInput = {
    id?: string
    nome: string
    curso: string
    criadoEm?: Date | string
    questoes?: SimuladoQuestaoUncheckedCreateNestedManyWithoutSimuladoInput
  }

  export type SimuladoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    curso?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    questoes?: SimuladoQuestaoUpdateManyWithoutSimuladoNestedInput
  }

  export type SimuladoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    curso?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    questoes?: SimuladoQuestaoUncheckedUpdateManyWithoutSimuladoNestedInput
  }

  export type SimuladoCreateManyInput = {
    id?: string
    nome: string
    curso: string
    criadoEm?: Date | string
  }

  export type SimuladoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    curso?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SimuladoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    curso?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SimuladoQuestaoCreateInput = {
    id?: string
    posicao: number
    questao: QuestaoCreateNestedOneWithoutSimuladosInput
    simulado: SimuladoCreateNestedOneWithoutQuestoesInput
  }

  export type SimuladoQuestaoUncheckedCreateInput = {
    id?: string
    questaoId: string
    simuladoId: string
    posicao: number
  }

  export type SimuladoQuestaoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    posicao?: IntFieldUpdateOperationsInput | number
    questao?: QuestaoUpdateOneRequiredWithoutSimuladosNestedInput
    simulado?: SimuladoUpdateOneRequiredWithoutQuestoesNestedInput
  }

  export type SimuladoQuestaoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    questaoId?: StringFieldUpdateOperationsInput | string
    simuladoId?: StringFieldUpdateOperationsInput | string
    posicao?: IntFieldUpdateOperationsInput | number
  }

  export type SimuladoQuestaoCreateManyInput = {
    id?: string
    questaoId: string
    simuladoId: string
    posicao: number
  }

  export type SimuladoQuestaoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    posicao?: IntFieldUpdateOperationsInput | number
  }

  export type SimuladoQuestaoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    questaoId?: StringFieldUpdateOperationsInput | string
    simuladoId?: StringFieldUpdateOperationsInput | string
    posicao?: IntFieldUpdateOperationsInput | number
  }

  export type RedacaoCreateInput = {
    id?: string
    tema?: string | null
    textosAuxiliares?: string | null
    conteudo: string
    correcao: string
    status?: string
    criadoEm?: Date | string
    usuario: UsuarioCreateNestedOneWithoutRedacoesInput
  }

  export type RedacaoUncheckedCreateInput = {
    id?: string
    usuarioId: string
    tema?: string | null
    textosAuxiliares?: string | null
    conteudo: string
    correcao: string
    status?: string
    criadoEm?: Date | string
  }

  export type RedacaoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tema?: NullableStringFieldUpdateOperationsInput | string | null
    textosAuxiliares?: NullableStringFieldUpdateOperationsInput | string | null
    conteudo?: StringFieldUpdateOperationsInput | string
    correcao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutRedacoesNestedInput
  }

  export type RedacaoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    tema?: NullableStringFieldUpdateOperationsInput | string | null
    textosAuxiliares?: NullableStringFieldUpdateOperationsInput | string | null
    conteudo?: StringFieldUpdateOperationsInput | string
    correcao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RedacaoCreateManyInput = {
    id?: string
    usuarioId: string
    tema?: string | null
    textosAuxiliares?: string | null
    conteudo: string
    correcao: string
    status?: string
    criadoEm?: Date | string
  }

  export type RedacaoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tema?: NullableStringFieldUpdateOperationsInput | string | null
    textosAuxiliares?: NullableStringFieldUpdateOperationsInput | string | null
    conteudo?: StringFieldUpdateOperationsInput | string
    correcao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RedacaoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    tema?: NullableStringFieldUpdateOperationsInput | string | null
    textosAuxiliares?: NullableStringFieldUpdateOperationsInput | string | null
    conteudo?: StringFieldUpdateOperationsInput | string
    correcao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type RedacaoListRelationFilter = {
    every?: RedacaoWhereInput
    some?: RedacaoWhereInput
    none?: RedacaoWhereInput
  }

  export type RedacaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nome?: SortOrder
    criadoEm?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nome?: SortOrder
    criadoEm?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    nome?: SortOrder
    criadoEm?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type SimuladoQuestaoListRelationFilter = {
    every?: SimuladoQuestaoWhereInput
    some?: SimuladoQuestaoWhereInput
    none?: SimuladoQuestaoWhereInput
  }

  export type SimuladoQuestaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestaoCountOrderByAggregateInput = {
    id?: SortOrder
    ano?: SortOrder
    curso?: SortOrder
    materia?: SortOrder
    categoria?: SortOrder
    enunciado?: SortOrder
    alternativaA?: SortOrder
    alternativaB?: SortOrder
    alternativaC?: SortOrder
    alternativaD?: SortOrder
    alternativaE?: SortOrder
    respostaCorreta?: SortOrder
    peso?: SortOrder
  }

  export type QuestaoAvgOrderByAggregateInput = {
    ano?: SortOrder
    peso?: SortOrder
  }

  export type QuestaoMaxOrderByAggregateInput = {
    id?: SortOrder
    ano?: SortOrder
    curso?: SortOrder
    materia?: SortOrder
    categoria?: SortOrder
    enunciado?: SortOrder
    alternativaA?: SortOrder
    alternativaB?: SortOrder
    alternativaC?: SortOrder
    alternativaD?: SortOrder
    alternativaE?: SortOrder
    respostaCorreta?: SortOrder
    peso?: SortOrder
  }

  export type QuestaoMinOrderByAggregateInput = {
    id?: SortOrder
    ano?: SortOrder
    curso?: SortOrder
    materia?: SortOrder
    categoria?: SortOrder
    enunciado?: SortOrder
    alternativaA?: SortOrder
    alternativaB?: SortOrder
    alternativaC?: SortOrder
    alternativaD?: SortOrder
    alternativaE?: SortOrder
    respostaCorreta?: SortOrder
    peso?: SortOrder
  }

  export type QuestaoSumOrderByAggregateInput = {
    ano?: SortOrder
    peso?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type SimuladoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    curso?: SortOrder
    criadoEm?: SortOrder
  }

  export type SimuladoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    curso?: SortOrder
    criadoEm?: SortOrder
  }

  export type SimuladoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    curso?: SortOrder
    criadoEm?: SortOrder
  }

  export type QuestaoScalarRelationFilter = {
    is?: QuestaoWhereInput
    isNot?: QuestaoWhereInput
  }

  export type SimuladoScalarRelationFilter = {
    is?: SimuladoWhereInput
    isNot?: SimuladoWhereInput
  }

  export type SimuladoQuestaoSimuladoIdPosicaoCompoundUniqueInput = {
    simuladoId: string
    posicao: number
  }

  export type SimuladoQuestaoCountOrderByAggregateInput = {
    id?: SortOrder
    questaoId?: SortOrder
    simuladoId?: SortOrder
    posicao?: SortOrder
  }

  export type SimuladoQuestaoAvgOrderByAggregateInput = {
    posicao?: SortOrder
  }

  export type SimuladoQuestaoMaxOrderByAggregateInput = {
    id?: SortOrder
    questaoId?: SortOrder
    simuladoId?: SortOrder
    posicao?: SortOrder
  }

  export type SimuladoQuestaoMinOrderByAggregateInput = {
    id?: SortOrder
    questaoId?: SortOrder
    simuladoId?: SortOrder
    posicao?: SortOrder
  }

  export type SimuladoQuestaoSumOrderByAggregateInput = {
    posicao?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UsuarioScalarRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RedacaoCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tema?: SortOrder
    textosAuxiliares?: SortOrder
    conteudo?: SortOrder
    correcao?: SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
  }

  export type RedacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tema?: SortOrder
    textosAuxiliares?: SortOrder
    conteudo?: SortOrder
    correcao?: SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
  }

  export type RedacaoMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tema?: SortOrder
    textosAuxiliares?: SortOrder
    conteudo?: SortOrder
    correcao?: SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type RedacaoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<RedacaoCreateWithoutUsuarioInput, RedacaoUncheckedCreateWithoutUsuarioInput> | RedacaoCreateWithoutUsuarioInput[] | RedacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RedacaoCreateOrConnectWithoutUsuarioInput | RedacaoCreateOrConnectWithoutUsuarioInput[]
    createMany?: RedacaoCreateManyUsuarioInputEnvelope
    connect?: RedacaoWhereUniqueInput | RedacaoWhereUniqueInput[]
  }

  export type RedacaoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<RedacaoCreateWithoutUsuarioInput, RedacaoUncheckedCreateWithoutUsuarioInput> | RedacaoCreateWithoutUsuarioInput[] | RedacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RedacaoCreateOrConnectWithoutUsuarioInput | RedacaoCreateOrConnectWithoutUsuarioInput[]
    createMany?: RedacaoCreateManyUsuarioInputEnvelope
    connect?: RedacaoWhereUniqueInput | RedacaoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type RedacaoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<RedacaoCreateWithoutUsuarioInput, RedacaoUncheckedCreateWithoutUsuarioInput> | RedacaoCreateWithoutUsuarioInput[] | RedacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RedacaoCreateOrConnectWithoutUsuarioInput | RedacaoCreateOrConnectWithoutUsuarioInput[]
    upsert?: RedacaoUpsertWithWhereUniqueWithoutUsuarioInput | RedacaoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: RedacaoCreateManyUsuarioInputEnvelope
    set?: RedacaoWhereUniqueInput | RedacaoWhereUniqueInput[]
    disconnect?: RedacaoWhereUniqueInput | RedacaoWhereUniqueInput[]
    delete?: RedacaoWhereUniqueInput | RedacaoWhereUniqueInput[]
    connect?: RedacaoWhereUniqueInput | RedacaoWhereUniqueInput[]
    update?: RedacaoUpdateWithWhereUniqueWithoutUsuarioInput | RedacaoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: RedacaoUpdateManyWithWhereWithoutUsuarioInput | RedacaoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: RedacaoScalarWhereInput | RedacaoScalarWhereInput[]
  }

  export type RedacaoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<RedacaoCreateWithoutUsuarioInput, RedacaoUncheckedCreateWithoutUsuarioInput> | RedacaoCreateWithoutUsuarioInput[] | RedacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RedacaoCreateOrConnectWithoutUsuarioInput | RedacaoCreateOrConnectWithoutUsuarioInput[]
    upsert?: RedacaoUpsertWithWhereUniqueWithoutUsuarioInput | RedacaoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: RedacaoCreateManyUsuarioInputEnvelope
    set?: RedacaoWhereUniqueInput | RedacaoWhereUniqueInput[]
    disconnect?: RedacaoWhereUniqueInput | RedacaoWhereUniqueInput[]
    delete?: RedacaoWhereUniqueInput | RedacaoWhereUniqueInput[]
    connect?: RedacaoWhereUniqueInput | RedacaoWhereUniqueInput[]
    update?: RedacaoUpdateWithWhereUniqueWithoutUsuarioInput | RedacaoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: RedacaoUpdateManyWithWhereWithoutUsuarioInput | RedacaoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: RedacaoScalarWhereInput | RedacaoScalarWhereInput[]
  }

  export type SimuladoQuestaoCreateNestedManyWithoutQuestaoInput = {
    create?: XOR<SimuladoQuestaoCreateWithoutQuestaoInput, SimuladoQuestaoUncheckedCreateWithoutQuestaoInput> | SimuladoQuestaoCreateWithoutQuestaoInput[] | SimuladoQuestaoUncheckedCreateWithoutQuestaoInput[]
    connectOrCreate?: SimuladoQuestaoCreateOrConnectWithoutQuestaoInput | SimuladoQuestaoCreateOrConnectWithoutQuestaoInput[]
    createMany?: SimuladoQuestaoCreateManyQuestaoInputEnvelope
    connect?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
  }

  export type SimuladoQuestaoUncheckedCreateNestedManyWithoutQuestaoInput = {
    create?: XOR<SimuladoQuestaoCreateWithoutQuestaoInput, SimuladoQuestaoUncheckedCreateWithoutQuestaoInput> | SimuladoQuestaoCreateWithoutQuestaoInput[] | SimuladoQuestaoUncheckedCreateWithoutQuestaoInput[]
    connectOrCreate?: SimuladoQuestaoCreateOrConnectWithoutQuestaoInput | SimuladoQuestaoCreateOrConnectWithoutQuestaoInput[]
    createMany?: SimuladoQuestaoCreateManyQuestaoInputEnvelope
    connect?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SimuladoQuestaoUpdateManyWithoutQuestaoNestedInput = {
    create?: XOR<SimuladoQuestaoCreateWithoutQuestaoInput, SimuladoQuestaoUncheckedCreateWithoutQuestaoInput> | SimuladoQuestaoCreateWithoutQuestaoInput[] | SimuladoQuestaoUncheckedCreateWithoutQuestaoInput[]
    connectOrCreate?: SimuladoQuestaoCreateOrConnectWithoutQuestaoInput | SimuladoQuestaoCreateOrConnectWithoutQuestaoInput[]
    upsert?: SimuladoQuestaoUpsertWithWhereUniqueWithoutQuestaoInput | SimuladoQuestaoUpsertWithWhereUniqueWithoutQuestaoInput[]
    createMany?: SimuladoQuestaoCreateManyQuestaoInputEnvelope
    set?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
    disconnect?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
    delete?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
    connect?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
    update?: SimuladoQuestaoUpdateWithWhereUniqueWithoutQuestaoInput | SimuladoQuestaoUpdateWithWhereUniqueWithoutQuestaoInput[]
    updateMany?: SimuladoQuestaoUpdateManyWithWhereWithoutQuestaoInput | SimuladoQuestaoUpdateManyWithWhereWithoutQuestaoInput[]
    deleteMany?: SimuladoQuestaoScalarWhereInput | SimuladoQuestaoScalarWhereInput[]
  }

  export type SimuladoQuestaoUncheckedUpdateManyWithoutQuestaoNestedInput = {
    create?: XOR<SimuladoQuestaoCreateWithoutQuestaoInput, SimuladoQuestaoUncheckedCreateWithoutQuestaoInput> | SimuladoQuestaoCreateWithoutQuestaoInput[] | SimuladoQuestaoUncheckedCreateWithoutQuestaoInput[]
    connectOrCreate?: SimuladoQuestaoCreateOrConnectWithoutQuestaoInput | SimuladoQuestaoCreateOrConnectWithoutQuestaoInput[]
    upsert?: SimuladoQuestaoUpsertWithWhereUniqueWithoutQuestaoInput | SimuladoQuestaoUpsertWithWhereUniqueWithoutQuestaoInput[]
    createMany?: SimuladoQuestaoCreateManyQuestaoInputEnvelope
    set?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
    disconnect?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
    delete?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
    connect?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
    update?: SimuladoQuestaoUpdateWithWhereUniqueWithoutQuestaoInput | SimuladoQuestaoUpdateWithWhereUniqueWithoutQuestaoInput[]
    updateMany?: SimuladoQuestaoUpdateManyWithWhereWithoutQuestaoInput | SimuladoQuestaoUpdateManyWithWhereWithoutQuestaoInput[]
    deleteMany?: SimuladoQuestaoScalarWhereInput | SimuladoQuestaoScalarWhereInput[]
  }

  export type SimuladoQuestaoCreateNestedManyWithoutSimuladoInput = {
    create?: XOR<SimuladoQuestaoCreateWithoutSimuladoInput, SimuladoQuestaoUncheckedCreateWithoutSimuladoInput> | SimuladoQuestaoCreateWithoutSimuladoInput[] | SimuladoQuestaoUncheckedCreateWithoutSimuladoInput[]
    connectOrCreate?: SimuladoQuestaoCreateOrConnectWithoutSimuladoInput | SimuladoQuestaoCreateOrConnectWithoutSimuladoInput[]
    createMany?: SimuladoQuestaoCreateManySimuladoInputEnvelope
    connect?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
  }

  export type SimuladoQuestaoUncheckedCreateNestedManyWithoutSimuladoInput = {
    create?: XOR<SimuladoQuestaoCreateWithoutSimuladoInput, SimuladoQuestaoUncheckedCreateWithoutSimuladoInput> | SimuladoQuestaoCreateWithoutSimuladoInput[] | SimuladoQuestaoUncheckedCreateWithoutSimuladoInput[]
    connectOrCreate?: SimuladoQuestaoCreateOrConnectWithoutSimuladoInput | SimuladoQuestaoCreateOrConnectWithoutSimuladoInput[]
    createMany?: SimuladoQuestaoCreateManySimuladoInputEnvelope
    connect?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
  }

  export type SimuladoQuestaoUpdateManyWithoutSimuladoNestedInput = {
    create?: XOR<SimuladoQuestaoCreateWithoutSimuladoInput, SimuladoQuestaoUncheckedCreateWithoutSimuladoInput> | SimuladoQuestaoCreateWithoutSimuladoInput[] | SimuladoQuestaoUncheckedCreateWithoutSimuladoInput[]
    connectOrCreate?: SimuladoQuestaoCreateOrConnectWithoutSimuladoInput | SimuladoQuestaoCreateOrConnectWithoutSimuladoInput[]
    upsert?: SimuladoQuestaoUpsertWithWhereUniqueWithoutSimuladoInput | SimuladoQuestaoUpsertWithWhereUniqueWithoutSimuladoInput[]
    createMany?: SimuladoQuestaoCreateManySimuladoInputEnvelope
    set?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
    disconnect?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
    delete?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
    connect?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
    update?: SimuladoQuestaoUpdateWithWhereUniqueWithoutSimuladoInput | SimuladoQuestaoUpdateWithWhereUniqueWithoutSimuladoInput[]
    updateMany?: SimuladoQuestaoUpdateManyWithWhereWithoutSimuladoInput | SimuladoQuestaoUpdateManyWithWhereWithoutSimuladoInput[]
    deleteMany?: SimuladoQuestaoScalarWhereInput | SimuladoQuestaoScalarWhereInput[]
  }

  export type SimuladoQuestaoUncheckedUpdateManyWithoutSimuladoNestedInput = {
    create?: XOR<SimuladoQuestaoCreateWithoutSimuladoInput, SimuladoQuestaoUncheckedCreateWithoutSimuladoInput> | SimuladoQuestaoCreateWithoutSimuladoInput[] | SimuladoQuestaoUncheckedCreateWithoutSimuladoInput[]
    connectOrCreate?: SimuladoQuestaoCreateOrConnectWithoutSimuladoInput | SimuladoQuestaoCreateOrConnectWithoutSimuladoInput[]
    upsert?: SimuladoQuestaoUpsertWithWhereUniqueWithoutSimuladoInput | SimuladoQuestaoUpsertWithWhereUniqueWithoutSimuladoInput[]
    createMany?: SimuladoQuestaoCreateManySimuladoInputEnvelope
    set?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
    disconnect?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
    delete?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
    connect?: SimuladoQuestaoWhereUniqueInput | SimuladoQuestaoWhereUniqueInput[]
    update?: SimuladoQuestaoUpdateWithWhereUniqueWithoutSimuladoInput | SimuladoQuestaoUpdateWithWhereUniqueWithoutSimuladoInput[]
    updateMany?: SimuladoQuestaoUpdateManyWithWhereWithoutSimuladoInput | SimuladoQuestaoUpdateManyWithWhereWithoutSimuladoInput[]
    deleteMany?: SimuladoQuestaoScalarWhereInput | SimuladoQuestaoScalarWhereInput[]
  }

  export type QuestaoCreateNestedOneWithoutSimuladosInput = {
    create?: XOR<QuestaoCreateWithoutSimuladosInput, QuestaoUncheckedCreateWithoutSimuladosInput>
    connectOrCreate?: QuestaoCreateOrConnectWithoutSimuladosInput
    connect?: QuestaoWhereUniqueInput
  }

  export type SimuladoCreateNestedOneWithoutQuestoesInput = {
    create?: XOR<SimuladoCreateWithoutQuestoesInput, SimuladoUncheckedCreateWithoutQuestoesInput>
    connectOrCreate?: SimuladoCreateOrConnectWithoutQuestoesInput
    connect?: SimuladoWhereUniqueInput
  }

  export type QuestaoUpdateOneRequiredWithoutSimuladosNestedInput = {
    create?: XOR<QuestaoCreateWithoutSimuladosInput, QuestaoUncheckedCreateWithoutSimuladosInput>
    connectOrCreate?: QuestaoCreateOrConnectWithoutSimuladosInput
    upsert?: QuestaoUpsertWithoutSimuladosInput
    connect?: QuestaoWhereUniqueInput
    update?: XOR<XOR<QuestaoUpdateToOneWithWhereWithoutSimuladosInput, QuestaoUpdateWithoutSimuladosInput>, QuestaoUncheckedUpdateWithoutSimuladosInput>
  }

  export type SimuladoUpdateOneRequiredWithoutQuestoesNestedInput = {
    create?: XOR<SimuladoCreateWithoutQuestoesInput, SimuladoUncheckedCreateWithoutQuestoesInput>
    connectOrCreate?: SimuladoCreateOrConnectWithoutQuestoesInput
    upsert?: SimuladoUpsertWithoutQuestoesInput
    connect?: SimuladoWhereUniqueInput
    update?: XOR<XOR<SimuladoUpdateToOneWithWhereWithoutQuestoesInput, SimuladoUpdateWithoutQuestoesInput>, SimuladoUncheckedUpdateWithoutQuestoesInput>
  }

  export type UsuarioCreateNestedOneWithoutRedacoesInput = {
    create?: XOR<UsuarioCreateWithoutRedacoesInput, UsuarioUncheckedCreateWithoutRedacoesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRedacoesInput
    connect?: UsuarioWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UsuarioUpdateOneRequiredWithoutRedacoesNestedInput = {
    create?: XOR<UsuarioCreateWithoutRedacoesInput, UsuarioUncheckedCreateWithoutRedacoesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRedacoesInput
    upsert?: UsuarioUpsertWithoutRedacoesInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutRedacoesInput, UsuarioUpdateWithoutRedacoesInput>, UsuarioUncheckedUpdateWithoutRedacoesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type RedacaoCreateWithoutUsuarioInput = {
    id?: string
    tema?: string | null
    textosAuxiliares?: string | null
    conteudo: string
    correcao: string
    status?: string
    criadoEm?: Date | string
  }

  export type RedacaoUncheckedCreateWithoutUsuarioInput = {
    id?: string
    tema?: string | null
    textosAuxiliares?: string | null
    conteudo: string
    correcao: string
    status?: string
    criadoEm?: Date | string
  }

  export type RedacaoCreateOrConnectWithoutUsuarioInput = {
    where: RedacaoWhereUniqueInput
    create: XOR<RedacaoCreateWithoutUsuarioInput, RedacaoUncheckedCreateWithoutUsuarioInput>
  }

  export type RedacaoCreateManyUsuarioInputEnvelope = {
    data: RedacaoCreateManyUsuarioInput | RedacaoCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type RedacaoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: RedacaoWhereUniqueInput
    update: XOR<RedacaoUpdateWithoutUsuarioInput, RedacaoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<RedacaoCreateWithoutUsuarioInput, RedacaoUncheckedCreateWithoutUsuarioInput>
  }

  export type RedacaoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: RedacaoWhereUniqueInput
    data: XOR<RedacaoUpdateWithoutUsuarioInput, RedacaoUncheckedUpdateWithoutUsuarioInput>
  }

  export type RedacaoUpdateManyWithWhereWithoutUsuarioInput = {
    where: RedacaoScalarWhereInput
    data: XOR<RedacaoUpdateManyMutationInput, RedacaoUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type RedacaoScalarWhereInput = {
    AND?: RedacaoScalarWhereInput | RedacaoScalarWhereInput[]
    OR?: RedacaoScalarWhereInput[]
    NOT?: RedacaoScalarWhereInput | RedacaoScalarWhereInput[]
    id?: StringFilter<"Redacao"> | string
    usuarioId?: StringFilter<"Redacao"> | string
    tema?: StringNullableFilter<"Redacao"> | string | null
    textosAuxiliares?: StringNullableFilter<"Redacao"> | string | null
    conteudo?: StringFilter<"Redacao"> | string
    correcao?: StringFilter<"Redacao"> | string
    status?: StringFilter<"Redacao"> | string
    criadoEm?: DateTimeFilter<"Redacao"> | Date | string
  }

  export type SimuladoQuestaoCreateWithoutQuestaoInput = {
    id?: string
    posicao: number
    simulado: SimuladoCreateNestedOneWithoutQuestoesInput
  }

  export type SimuladoQuestaoUncheckedCreateWithoutQuestaoInput = {
    id?: string
    simuladoId: string
    posicao: number
  }

  export type SimuladoQuestaoCreateOrConnectWithoutQuestaoInput = {
    where: SimuladoQuestaoWhereUniqueInput
    create: XOR<SimuladoQuestaoCreateWithoutQuestaoInput, SimuladoQuestaoUncheckedCreateWithoutQuestaoInput>
  }

  export type SimuladoQuestaoCreateManyQuestaoInputEnvelope = {
    data: SimuladoQuestaoCreateManyQuestaoInput | SimuladoQuestaoCreateManyQuestaoInput[]
    skipDuplicates?: boolean
  }

  export type SimuladoQuestaoUpsertWithWhereUniqueWithoutQuestaoInput = {
    where: SimuladoQuestaoWhereUniqueInput
    update: XOR<SimuladoQuestaoUpdateWithoutQuestaoInput, SimuladoQuestaoUncheckedUpdateWithoutQuestaoInput>
    create: XOR<SimuladoQuestaoCreateWithoutQuestaoInput, SimuladoQuestaoUncheckedCreateWithoutQuestaoInput>
  }

  export type SimuladoQuestaoUpdateWithWhereUniqueWithoutQuestaoInput = {
    where: SimuladoQuestaoWhereUniqueInput
    data: XOR<SimuladoQuestaoUpdateWithoutQuestaoInput, SimuladoQuestaoUncheckedUpdateWithoutQuestaoInput>
  }

  export type SimuladoQuestaoUpdateManyWithWhereWithoutQuestaoInput = {
    where: SimuladoQuestaoScalarWhereInput
    data: XOR<SimuladoQuestaoUpdateManyMutationInput, SimuladoQuestaoUncheckedUpdateManyWithoutQuestaoInput>
  }

  export type SimuladoQuestaoScalarWhereInput = {
    AND?: SimuladoQuestaoScalarWhereInput | SimuladoQuestaoScalarWhereInput[]
    OR?: SimuladoQuestaoScalarWhereInput[]
    NOT?: SimuladoQuestaoScalarWhereInput | SimuladoQuestaoScalarWhereInput[]
    id?: StringFilter<"SimuladoQuestao"> | string
    questaoId?: StringFilter<"SimuladoQuestao"> | string
    simuladoId?: StringFilter<"SimuladoQuestao"> | string
    posicao?: IntFilter<"SimuladoQuestao"> | number
  }

  export type SimuladoQuestaoCreateWithoutSimuladoInput = {
    id?: string
    posicao: number
    questao: QuestaoCreateNestedOneWithoutSimuladosInput
  }

  export type SimuladoQuestaoUncheckedCreateWithoutSimuladoInput = {
    id?: string
    questaoId: string
    posicao: number
  }

  export type SimuladoQuestaoCreateOrConnectWithoutSimuladoInput = {
    where: SimuladoQuestaoWhereUniqueInput
    create: XOR<SimuladoQuestaoCreateWithoutSimuladoInput, SimuladoQuestaoUncheckedCreateWithoutSimuladoInput>
  }

  export type SimuladoQuestaoCreateManySimuladoInputEnvelope = {
    data: SimuladoQuestaoCreateManySimuladoInput | SimuladoQuestaoCreateManySimuladoInput[]
    skipDuplicates?: boolean
  }

  export type SimuladoQuestaoUpsertWithWhereUniqueWithoutSimuladoInput = {
    where: SimuladoQuestaoWhereUniqueInput
    update: XOR<SimuladoQuestaoUpdateWithoutSimuladoInput, SimuladoQuestaoUncheckedUpdateWithoutSimuladoInput>
    create: XOR<SimuladoQuestaoCreateWithoutSimuladoInput, SimuladoQuestaoUncheckedCreateWithoutSimuladoInput>
  }

  export type SimuladoQuestaoUpdateWithWhereUniqueWithoutSimuladoInput = {
    where: SimuladoQuestaoWhereUniqueInput
    data: XOR<SimuladoQuestaoUpdateWithoutSimuladoInput, SimuladoQuestaoUncheckedUpdateWithoutSimuladoInput>
  }

  export type SimuladoQuestaoUpdateManyWithWhereWithoutSimuladoInput = {
    where: SimuladoQuestaoScalarWhereInput
    data: XOR<SimuladoQuestaoUpdateManyMutationInput, SimuladoQuestaoUncheckedUpdateManyWithoutSimuladoInput>
  }

  export type QuestaoCreateWithoutSimuladosInput = {
    id?: string
    ano: number
    curso: string
    materia: string
    categoria: string
    enunciado: string
    alternativaA: string
    alternativaB: string
    alternativaC: string
    alternativaD: string
    alternativaE: string
    respostaCorreta: string
    peso: number
  }

  export type QuestaoUncheckedCreateWithoutSimuladosInput = {
    id?: string
    ano: number
    curso: string
    materia: string
    categoria: string
    enunciado: string
    alternativaA: string
    alternativaB: string
    alternativaC: string
    alternativaD: string
    alternativaE: string
    respostaCorreta: string
    peso: number
  }

  export type QuestaoCreateOrConnectWithoutSimuladosInput = {
    where: QuestaoWhereUniqueInput
    create: XOR<QuestaoCreateWithoutSimuladosInput, QuestaoUncheckedCreateWithoutSimuladosInput>
  }

  export type SimuladoCreateWithoutQuestoesInput = {
    id?: string
    nome: string
    curso: string
    criadoEm?: Date | string
  }

  export type SimuladoUncheckedCreateWithoutQuestoesInput = {
    id?: string
    nome: string
    curso: string
    criadoEm?: Date | string
  }

  export type SimuladoCreateOrConnectWithoutQuestoesInput = {
    where: SimuladoWhereUniqueInput
    create: XOR<SimuladoCreateWithoutQuestoesInput, SimuladoUncheckedCreateWithoutQuestoesInput>
  }

  export type QuestaoUpsertWithoutSimuladosInput = {
    update: XOR<QuestaoUpdateWithoutSimuladosInput, QuestaoUncheckedUpdateWithoutSimuladosInput>
    create: XOR<QuestaoCreateWithoutSimuladosInput, QuestaoUncheckedCreateWithoutSimuladosInput>
    where?: QuestaoWhereInput
  }

  export type QuestaoUpdateToOneWithWhereWithoutSimuladosInput = {
    where?: QuestaoWhereInput
    data: XOR<QuestaoUpdateWithoutSimuladosInput, QuestaoUncheckedUpdateWithoutSimuladosInput>
  }

  export type QuestaoUpdateWithoutSimuladosInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    curso?: StringFieldUpdateOperationsInput | string
    materia?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    enunciado?: StringFieldUpdateOperationsInput | string
    alternativaA?: StringFieldUpdateOperationsInput | string
    alternativaB?: StringFieldUpdateOperationsInput | string
    alternativaC?: StringFieldUpdateOperationsInput | string
    alternativaD?: StringFieldUpdateOperationsInput | string
    alternativaE?: StringFieldUpdateOperationsInput | string
    respostaCorreta?: StringFieldUpdateOperationsInput | string
    peso?: IntFieldUpdateOperationsInput | number
  }

  export type QuestaoUncheckedUpdateWithoutSimuladosInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    curso?: StringFieldUpdateOperationsInput | string
    materia?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    enunciado?: StringFieldUpdateOperationsInput | string
    alternativaA?: StringFieldUpdateOperationsInput | string
    alternativaB?: StringFieldUpdateOperationsInput | string
    alternativaC?: StringFieldUpdateOperationsInput | string
    alternativaD?: StringFieldUpdateOperationsInput | string
    alternativaE?: StringFieldUpdateOperationsInput | string
    respostaCorreta?: StringFieldUpdateOperationsInput | string
    peso?: IntFieldUpdateOperationsInput | number
  }

  export type SimuladoUpsertWithoutQuestoesInput = {
    update: XOR<SimuladoUpdateWithoutQuestoesInput, SimuladoUncheckedUpdateWithoutQuestoesInput>
    create: XOR<SimuladoCreateWithoutQuestoesInput, SimuladoUncheckedCreateWithoutQuestoesInput>
    where?: SimuladoWhereInput
  }

  export type SimuladoUpdateToOneWithWhereWithoutQuestoesInput = {
    where?: SimuladoWhereInput
    data: XOR<SimuladoUpdateWithoutQuestoesInput, SimuladoUncheckedUpdateWithoutQuestoesInput>
  }

  export type SimuladoUpdateWithoutQuestoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    curso?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SimuladoUncheckedUpdateWithoutQuestoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    curso?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioCreateWithoutRedacoesInput = {
    id?: string
    email: string
    senha: string
    nome: string
    criadoEm?: Date | string
  }

  export type UsuarioUncheckedCreateWithoutRedacoesInput = {
    id?: string
    email: string
    senha: string
    nome: string
    criadoEm?: Date | string
  }

  export type UsuarioCreateOrConnectWithoutRedacoesInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutRedacoesInput, UsuarioUncheckedCreateWithoutRedacoesInput>
  }

  export type UsuarioUpsertWithoutRedacoesInput = {
    update: XOR<UsuarioUpdateWithoutRedacoesInput, UsuarioUncheckedUpdateWithoutRedacoesInput>
    create: XOR<UsuarioCreateWithoutRedacoesInput, UsuarioUncheckedCreateWithoutRedacoesInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutRedacoesInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutRedacoesInput, UsuarioUncheckedUpdateWithoutRedacoesInput>
  }

  export type UsuarioUpdateWithoutRedacoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioUncheckedUpdateWithoutRedacoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RedacaoCreateManyUsuarioInput = {
    id?: string
    tema?: string | null
    textosAuxiliares?: string | null
    conteudo: string
    correcao: string
    status?: string
    criadoEm?: Date | string
  }

  export type RedacaoUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    tema?: NullableStringFieldUpdateOperationsInput | string | null
    textosAuxiliares?: NullableStringFieldUpdateOperationsInput | string | null
    conteudo?: StringFieldUpdateOperationsInput | string
    correcao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RedacaoUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    tema?: NullableStringFieldUpdateOperationsInput | string | null
    textosAuxiliares?: NullableStringFieldUpdateOperationsInput | string | null
    conteudo?: StringFieldUpdateOperationsInput | string
    correcao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RedacaoUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    tema?: NullableStringFieldUpdateOperationsInput | string | null
    textosAuxiliares?: NullableStringFieldUpdateOperationsInput | string | null
    conteudo?: StringFieldUpdateOperationsInput | string
    correcao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SimuladoQuestaoCreateManyQuestaoInput = {
    id?: string
    simuladoId: string
    posicao: number
  }

  export type SimuladoQuestaoUpdateWithoutQuestaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    posicao?: IntFieldUpdateOperationsInput | number
    simulado?: SimuladoUpdateOneRequiredWithoutQuestoesNestedInput
  }

  export type SimuladoQuestaoUncheckedUpdateWithoutQuestaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    simuladoId?: StringFieldUpdateOperationsInput | string
    posicao?: IntFieldUpdateOperationsInput | number
  }

  export type SimuladoQuestaoUncheckedUpdateManyWithoutQuestaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    simuladoId?: StringFieldUpdateOperationsInput | string
    posicao?: IntFieldUpdateOperationsInput | number
  }

  export type SimuladoQuestaoCreateManySimuladoInput = {
    id?: string
    questaoId: string
    posicao: number
  }

  export type SimuladoQuestaoUpdateWithoutSimuladoInput = {
    id?: StringFieldUpdateOperationsInput | string
    posicao?: IntFieldUpdateOperationsInput | number
    questao?: QuestaoUpdateOneRequiredWithoutSimuladosNestedInput
  }

  export type SimuladoQuestaoUncheckedUpdateWithoutSimuladoInput = {
    id?: StringFieldUpdateOperationsInput | string
    questaoId?: StringFieldUpdateOperationsInput | string
    posicao?: IntFieldUpdateOperationsInput | number
  }

  export type SimuladoQuestaoUncheckedUpdateManyWithoutSimuladoInput = {
    id?: StringFieldUpdateOperationsInput | string
    questaoId?: StringFieldUpdateOperationsInput | string
    posicao?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}